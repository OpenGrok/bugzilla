 log.log(Level.INFO,
-                        "Skipped file ''{0}'' because the analyzer didn''t " +
-                        "understand it.",
-                        path);
-                log.log(Level.FINE, "Exception from analyzer:", e);
+                logger.log(Level.INFO,
+                    "Skipped file ''{0}'' because the analyzer didn''t " +
+                    "understand it.", path);
+                logger.log(Level.FINE, "addFile", e);
                 return;
             }
 
@@ -646,24 +641,25 @@
         String absolutePath = file.getAbsolutePath();
 
         if (!file.canRead()) {
-            log.log(Level.WARNING, "Warning: could not read {0}", absolutePath);
+            logger.warning("Could not read " + absolutePath);
             return false;
         }
 
         try {
             String canonicalPath = file.getCanonicalPath();
             if (!absolutePath.equals(canonicalPath) && !acceptSymlink(absolutePath, canonicalPath)) {
-                log.log(Level.FINE, "Skipped symlink ''{0}'' -> ''{1}''", new Object[]{absolutePath, canonicalPath});
+                logger.log(Level.FINE, "Skipped symlink ''{0}'' -> ''{1}''", 
+                    new Object[]{absolutePath, canonicalPath});
                 return false;
             }
             //below will only let go files and directories, anything else is considered special and is not added
             if (!file.isFile() && !file.isDirectory()) {
-                log.log(Level.WARNING, "Warning: ignored special file {0}", absolutePath);
-                    return false;
+                logger.warning("Ignored special file '" + absolutePath + "'");
+                return false;
             }
         } catch (IOException exp) {
-            log.log(Level.WARNING, "Warning: Failed to resolve name: {0}", absolutePath);
-            log.log(Level.FINE,"Stack Trace: ",exp);
+            logger.warning("Failed to resolve name '" + absolutePath + "'");
+            logger.log(Level.FINE, "accept", exp);
         }
 
         if (file.isDirectory()) {
@@ -685,8 +681,8 @@
             File f1 = parent.getCanonicalFile();
             File f2 = file.getCanonicalFile();
             if (f1.equals(f2)) {
-                log.log(Level.INFO, "Skipping links to itself...: {0} {1}",
-                        new Object[]{parent.getAbsolutePath(), file.getAbsolutePath()});
+                logger.log(Level.INFO, "Skipping links to itself (''{0}'' ''{1}'')",
+                    new Object[]{parent.getAbsolutePath(), file.getAbsolutePath()});
                 return false;
             }
 
@@ -694,16 +690,16 @@
             File t1 = f1;
             while ((t1 = t1.getParentFile()) != null) {
                 if (f2.equals(t1)) {
-                    log.log(Level.INFO, "Skipping links to parent...: {0} {1}",
-                            new Object[]{parent.getAbsolutePath(), file.getAbsolutePath()});
+                    logger.log(Level.INFO, "Skipping links to parent (''{0}'' ''{1}'')",
+                        new Object[]{parent.getAbsolutePath(), file.getAbsolutePath()});
                     return false;
                 }
             }
 
             return accept(file);
         } catch (IOException ex) {
-            log.log(Level.WARNING, "Warning: Failed to resolve name: {0} {1}",
-                    new Object[]{parent.getAbsolutePath(), file.getAbsolutePath()});
+            logger.log(Level.WARNING, "Failed to resolve name (''{0}'' ''{1}'')",
+                new Object[]{parent.getAbsolutePath(), file.getAbsolutePath()});
         }
         return false;
     }
@@ -783,7 +779,7 @@
 
         File[] files = dir.listFiles();
         if (files == null) {
-            log.log(Level.SEVERE, "Failed to get file listing for: {0}", dir.getAbsolutePath());
+            logger.severe("Failed to get file listing for '" + dir.getAbsolutePath() + "'");
             return lcur_count;
         }
         Arrays.sort(files, new Comparator<File>() {
@@ -805,13 +801,18 @@
                         continue;
                     }
 
-                    if (RuntimeEnvironment.getInstance().isPrintProgress() && est_total > 0 && log.isLoggable(Level.INFO) )
+                    if (RuntimeEnvironment.getInstance().isPrintProgress() 
+                        && est_total > 0 && logger.isLoggable(Level.INFO) )
                     {
-                        log.log(Level.INFO, "Progress: {0} ({1}%)", new Object[]{lcur_count, (lcur_count * 100.0f / est_total) });
+                        logger.log(Level.INFO, "Progress: {0} ({1}%)", 
+                            new Object[] { lcur_count, 
+                            (lcur_count * 100.0f / est_total) });
                     }
 
                     if (uidIter != null) {
-                        String uid = Util.path2uid(path, DateTools.timeToString(file.lastModified(), DateTools.Resolution.MILLISECOND)); // construct uid for doc
+                        String uid = Util.path2uid(path, DateTools
+                            .timeToString(file.lastModified(), 
+                                DateTools.Resolution.MILLISECOND)); // construct uid for doc
                         while (uidIter.term() != null && uidIter.term().field().equals("u") &&
                                 uidIter.term().text().compareTo(uid) < 0) {
                             removeFile();
@@ -827,9 +828,8 @@
                     try {
                         addFile(file, path);
                     } catch (Exception e) {
-                        log.log(Level.WARNING,
-                                "Failed to add file " + file.getAbsolutePath(),
-                                e);
+                        logger.warning("Failed to add file '" 
+                            + file.getAbsolutePath() + "': " + e.getMessage());
                     }
                 }
             }
@@ -900,7 +900,8 @@
                 for (String path : subFiles) {
                     Project project = Project.getProject(path);
                     if (project == null) {
-                        log.log(Level.WARNING, "Warning: Could not find a project for \"{0}\"", path);
+                        logger.warning("Could not find a project for '" 
+                            + path + "'");
                     } else {
                         IndexDatabase db = new IndexDatabase(project);
                         db.listFiles();
@@ -925,26 +926,15 @@
         try {
             ireader = IndexReader.open(indexDirectory,false); // open existing index
             iter = ireader.terms(new Term("u", "")); // init uid iterator
-            while (iter.term() != null) {
-                log.fine(Util.uid2url(iter.term().text()));
-                iter.next();
+            if (logger.isLoggable(Level.FINE)) {
+                while (iter.term() != null) {
+                    logger.fine(Util.uid2url(iter.term().text()));
+                    iter.next();
+                }
             }
         } finally {
-            if (iter != null) {
-                try {
-                    iter.close();
-                } catch (IOException e) {
-                    log.log(Level.WARNING, "An error occured while closing index iterator", e);
-                }
-            }
-
-            if (ireader != null) {
-                try {
-                    ireader.close();
-                } catch (IOException e) {
-                    log.log(Level.WARNING, "An error occured while closing index reader", e);
-                }
-            }
+            IOUtils.close(iter);
+            IOUtils.close(ireader);
         }
     }
 
@@ -966,7 +956,7 @@
                 for (String path : subFiles) {
                     Project project = Project.getProject(path);
                     if (project == null) {
-                        log.log(Level.WARNING, "Warning: Could not find a project for \"{0}\"", path);
+                        logger.warning("Could not find a project for '" + path + "'");
                     } else {
                         IndexDatabase db = new IndexDatabase(project);
                         db.listTokens(4);
@@ -989,7 +979,7 @@
             while (iter.term() != null) {
                 if (iter.term().field().startsWith("f")) {
                     if (iter.docFreq() > 16 && iter.term().text().length() > freq) {
-                        log.warning(iter.term().text());
+                        logger.warning(iter.term().text());
                     }
                     iter.next();
                 } else {
@@ -997,21 +987,8 @@
                 }
             }
         } finally {
-            if (iter != null) {
-                try {
-                    iter.close();
-                } catch (IOException e) {
-                    log.log(Level.WARNING, "An error occured while closing index iterator", e);
-                }
-            }
-
-            if (ireader != null) {
-                try {
-                    ireader.close();
-                } catch (IOException e) {
-                    log.log(Level.WARNING, "An error occured while closing index reader", e);
-                }
-            }
+            IOUtils.close(iter);
+            IOUtils.close(ireader);
         }
     }
 
@@ -1040,8 +1017,8 @@
                 ret = IndexReader.open(fdir,false);
             }
         } catch (Exception ex) {
-            log.log(Level.SEVERE, "Failed to open index: {0}", indexDir.getAbsolutePath());
-            log.log(Level.FINE,"Stack Trace: ",ex);
+            logger.warning("Failed to open index '" + indexDir.getAbsolutePath() + "'");
+            logger.log(Level.FINE, "getIndexReader", ex);
         }
         return ret;
     }
@@ -1121,4 +1098,11 @@
         return hash;
     }
 
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String toString() {
+        return (project == null ? "" : project.getDescription()) + " Lucene IndexDB";
+    }
 }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/index/Indexer.java
--- a/src/org/opensolaris/opengrok/index/Indexer.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/index/Indexer.java	Mon Feb 13 06:12:47 2012 +0100
@@ -64,11 +64,10 @@
  */
 @SuppressWarnings({"PMD.AvoidPrintStackTrace", "PMD.SystemPrintln"})
 public final class Indexer {
-
     private static final String ON = "on";
     private static final String OFF = "off";
     private static Indexer index = new Indexer();
-    static final Logger log = Logger.getLogger(Indexer.class.getName());
+    private static final Logger log = Logger.getLogger(Indexer.class.getName());
 
     private static final String DERBY_EMBEDDED_DRIVER =
             "org.apache.derby.jdbc.EmbeddedDriver";
@@ -117,7 +116,7 @@
             try {
                 getopt.parse();
             } catch (ParseException ex) {
-                System.err.println("OpenGrok: " + ex.getMessage());
+                System.err.println(ex.getMessage());
                 System.err.println(cmdOptions.getUsage());
                 System.exit(1);
             }
@@ -343,12 +342,11 @@
                                 }
 
                                 try {
-                                    AnalyzerGuru.addExtension(
-                                            arg[0],
-                                            AnalyzerGuru.findFactory(arg[1]));
+                                    AnalyzerGuru.addExtension(arg[0],
+                                        AnalyzerGuru.findFactory(arg[1]));
                                 } catch (Exception e) {
                                     log.log(Level.SEVERE, "Unable to use {0} as a FileAnalyzerFactory", arg[1]);
-                                    log.log(Level.SEVERE, "Stack: ",e.fillInStackTrace());
+                                    log.log(Level.FINE, "main", e);
                                     System.exit(1);
                                 }
                             }
@@ -505,12 +503,13 @@
                 }
                 getInstance().sendToConfigHost(env, configHost);
             } catch (IndexerException ex) {
-                log.log(Level.SEVERE, "Exception running indexer", ex);
+                log.log(Level.SEVERE, "Exception running indexer: " + ex.getMessage());
+                log.log(Level.FINE, "main", ex);
                 System.err.println(cmdOptions.getUsage());
                 System.exit(1);
             } catch (Throwable e) {
-                System.err.println("Exception: " + e.getLocalizedMessage());
-                log.log(Level.SEVERE, "Unexpected Exception", e);
+                log.log(Level.SEVERE, e.getLocalizedMessage());
+                log.log(Level.FINE, "main", e);
                 System.exit(1);
             }
         }
@@ -534,11 +533,11 @@
             boolean listRepoPathes) throws IndexerException, IOException {
 
         if (env.getDataRootPath() == null) {
-            throw new IndexerException("ERROR: Please specify a DATA ROOT path");
+            throw new IndexerException("Please specify a DATA ROOT path");
         }
 
         if (env.getSourceRootFile() == null) {
-            throw new IndexerException("ERROR: please specify a SRC_ROOT with option -s !");
+            throw new IndexerException("Please specify a SRC_ROOT with option -s");
         }
 
         if (!env.validateExuberantCtags()) {
@@ -553,7 +552,7 @@
             long start = System.currentTimeMillis();
             HistoryGuru.getInstance().addRepositories(env.getSourceRootPath());
             long time = (System.currentTimeMillis() - start) / 1000;
-            log.log(Level.INFO, "Done scanning for repositories ({0}s)", time);
+            log.log(Level.INFO, "Done scanning for repositories {0}s", time);
             if (listRepoPathes || !zapCache.isEmpty()) {
                 List<RepositoryInfo> repos = env.getRepositories();
                 String prefix =  env.getSourceRootPath();
@@ -661,19 +660,19 @@
         }
 
         if (configFilename != null) {
-            log.log(Level.INFO, "Writing configuration to {0}", configFilename);
+            log.log(Level.INFO, "Writing configuration to ''{0}''", configFilename);
             env.writeConfiguration(new File(configFilename));
-            log.info("Done...");
+            log.info("Done.");
         }
 
         if (refreshHistory) {
             log.log(Level.INFO, "Generating history cache for all repositories ...");
             HistoryGuru.getInstance().createCache();
-            log.info("Done...");
+            log.info("Done.");
         } else if (repositories != null && !repositories.isEmpty()) {
             log.log(Level.INFO, "Generating history cache for specified repositories ...");
             HistoryGuru.getInstance().createCache(repositories);
-            log.info("Done...");
+            log.info("Done.");
         }
 
         if (listFiles) {
@@ -689,7 +688,7 @@
             IndexChangedListener progress)
             throws IOException {
         RuntimeEnvironment env = RuntimeEnvironment.getInstance().register();
-        log.info("Starting indexing");
+        log.info("Starting indexing ...");
 
         ExecutorService executor = Executors.newFixedThreadPool(noThreads);
 
@@ -705,7 +704,7 @@
             for (String path : subFiles) {
                 Project project = Project.getProject(path);
                 if (project == null && env.hasProjects()) {
-                    log.log(Level.WARNING, "Could not find a project for \"{0}\"", path);
+                    log.warning("Could not find a project for '" + path + "'");
                 } else {
                     IndexDatabase db;
                     if (project == null) {
@@ -723,7 +722,7 @@
                             dbs.add(db);
                         }
                     } else {
-                        log.log(Level.WARNING, "Directory does not exist \"{0}\"", path);
+                        log.warning("Directory does not exist '" + path + "'");
                     }
                 }
             }
@@ -742,9 +741,10 @@
                                 db.optimize();
                             }
                         } catch (Throwable e) {
-                            log.log(Level.SEVERE, "An error occured while "
-                                + (update ? "updating" : "optimizing")
-                                + " index", e);
+                            log.warning("An error occured while "
+                                + (update ? "updating " : "optimizing ")
+                                + db + ": " + e.getMessage());
+                            log.log(Level.FINE, "run", e);
                         }
                     }
                 });
@@ -757,7 +757,9 @@
                 // Wait forever
                 executor.awaitTermination(999,TimeUnit.DAYS);
             } catch (InterruptedException exp) {
-                log.log(Level.WARNING, "Received interrupt while waiting for executor to finish", exp);
+                log.warning("Received interrupt while waiting for executor to finish: "
+                    + exp.getMessage());
+                log.log(Level.FINE, "doIndexerExecution", exp);
             }
        }
     }
@@ -765,19 +767,25 @@
     public void sendToConfigHost(RuntimeEnvironment env, String configHost) {
         if (configHost != null) {
             String[] cfg = configHost.split(":");
-            log.log(Level.INFO, "Send configuration to: {0}", configHost);
+            log.log(Level.INFO, "Sending configuration to {0}", configHost);
             if (cfg.length == 2) {
                 try {
                     InetAddress host = InetAddress.getByName(cfg[0]);
                     RuntimeEnvironment.getInstance().writeConfiguration(host, Integer.parseInt(cfg[1]));
                 } catch (Exception ex) {
-                    log.log(Level.SEVERE, "Failed to send configuration to " + configHost+" (is web application server running with opengrok deployed?)", ex);
+                    log.log(Level.WARNING, "Failed to send configuration to " 
+                        + configHost 
+                        + " (is web application server running with opengrok deployed?): "
+                        + ex.getMessage());
+                    log.log(Level.FINE, "sendToConfigHost", ex);
                 }
-            } else {
-                log.severe("Syntax error: ");
+            } else if ( cfg.length > 0 ) {
+                StringBuilder sb = new StringBuilder("Syntax errors = ");
                 for (String s : cfg) {
-                    log.log(Level.SEVERE, "[{0}]", s);
+                    sb.append('[').append(s).append(']').append(", ");
                 }
+                sb.setLength(sb.length()-2);
+                log.warning(sb.toString());
             }
             log.info("Configuration update routine done, check log output for errors.");
         }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/AgentIndexRunner.java
--- a/src/org/opensolaris/opengrok/management/AgentIndexRunner.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/AgentIndexRunner.java	Mon Feb 13 06:12:47 2012 +0100
@@ -51,6 +51,7 @@
 public final class AgentIndexRunner implements AgentIndexRunnerMBean, NotificationListener,
         MBeanRegistration, Runnable, IndexChangedListener, NotificationEmitter {
 
+    private static final Logger log = Logger.getLogger(AgentIndexRunner.class.getName());
     private transient static AgentIndexRunner indexerInstance = null;
     private static final String NOTIFICATIONACTIONTYPE = "ogaaction";
     private static final String NOTIFICATIONEXCEPTIONTYPE = "ogaexception";
@@ -58,7 +59,6 @@
     private static final String NOTIFICATIONINFOLONGTYPE = "ogainfolong";
     private boolean enabled;
     private transient Thread indexThread = null;
-    private static final Logger log = Logger.getLogger("org.opensolaris.opengrok");
     private RuntimeEnvironment env = null;
     private long lastIndexStart = 0;
     private long lastIndexFinish = 0;
@@ -125,7 +125,7 @@
             File cfgFile = new File(configfile);
             if (cfgFile.exists()) {
                 env = RuntimeEnvironment.getInstance();
-                log.log(Level.INFO, "Running indexer with configuration {0}", configfile);
+                log.log(Level.INFO, "Running indexer with configuration ''{0}''", configfile);
                 env.readConfiguration(cfgFile);
 
                 Indexer index = Indexer.getInstance();
@@ -152,12 +152,12 @@
 
 
             } else {
-                log.log(Level.WARNING, "Cannot Run indexing without proper configuration file {0}", configfile);
+                log.log(Level.WARNING, "Cannot Run indexing without proper configuration file ''{0}''", configfile);
                 doNotify(NOTIFICATIONEXCEPTIONTYPE, "Configuration file not valid", configfile);
             }
         } catch (Exception e) {
-            log.log(Level.SEVERE,
-                    "Exception running indexing ", e);
+            log.warning("Exception running indexing: " + e.getMessage());
+            log.log(Level.FINE, "run", e);
             lastException = e;
         }
     }
@@ -192,7 +192,7 @@
                 log.info("Indexing is disabled, doing nothing");
             }
         } else {
-            log.log(Level.WARNING, "Received unknown notification type: {0}", n.getType());
+            log.log(Level.WARNING, "Received unknown notification type ''{0}''", n.getType());
         }
     }
 
@@ -223,12 +223,13 @@
                 if (!waitForFinished) {
                     return;
                 }
-                log.fine("Waiting for indexer to finish...");
+                log.fine("Waiting for indexer to finish ...");
                 indexThread.join();
                 log.fine("indexer finished.");
             } catch (Exception e) {
-                log.log(Level.SEVERE,
-                        "Caught Exception while waiting for indexing to finish.", e);
+                log.warning("Caught Exception while waiting for indexing to finish: " 
+                    + e.getMessage());
+                log.log(Level.FINE, "index", e);
             }
             return;
         }
@@ -236,30 +237,30 @@
 
     @Override
     public void fileAdd(String path, String analyzer) {
-        log.log(Level.INFO, "Add {0} analyzer {1}", new Object[]{path, analyzer});
+        log.log(Level.FINE, "Add ''{0}'' analyzer {1}", new Object[]{path, analyzer});
     }
 
     @Override
     public void fileRemove(String path) {
-        log.log(Level.INFO, "File remove {0}", path);
+        log.log(Level.FINE, "File remove ''{0}''", path);
     }
 
     @Override
     public void fileUpdate(String path) {
-        log.log(Level.INFO, "File updated {0}", path);
+        log.log(Level.FINE, "File updated ''{0}''", path);
         addFileAction("U:", path);
     }
 
 
     @Override
     public void fileAdded(String path, String analyzer) {
-        log.log(Level.INFO, "Added {0} analyzer {1}", new Object[]{path, analyzer});
+        log.log(Level.FINE, "Added ''{0}'' analyzer {1}", new Object[]{path, analyzer});
         addFileAction("A:", path);
     }
 
     @Override
     public void fileRemoved(String path) {
-        log.log(Level.INFO, "File removed {0}", path);
+        log.log(Level.FINE, "File removed ''{0}''", path);
         addFileAction("R:", path);
     }
 
@@ -301,7 +302,7 @@
 
     @Override
     public void addNotificationListener(NotificationListener notiflistener, NotificationFilter notfilt, Object obj) throws IllegalArgumentException {
-        log.log(Level.CONFIG, "Adds a notiflistner, with obj {0}", obj.toString());
+        log.log(Level.CONFIG, "Adds a notify listener, with obj {0}", obj.toString());
         if (notiflistener == null) {
             throw new IllegalArgumentException("Must have legal NotificationListener");
         }
@@ -312,7 +313,7 @@
 
     @Override
     public void removeNotificationListener(NotificationListener notiflistener) throws ListenerNotFoundException {
-        log.info("removes a notiflistener, no obj");
+        log.info("removes a notify listener, no obj");
         boolean removed = false;
         synchronized (notifListeners) {
             Iterator<NotificationHolder> it = notifListeners.iterator();
@@ -331,7 +332,7 @@
 
     @Override
     public void removeNotificationListener(NotificationListener notiflistener, NotificationFilter filt, Object obj) throws ListenerNotFoundException {
-        log.log(Level.CONFIG, "removes a notiflistener obj {0}", obj);
+        log.log(Level.CONFIG, "removes a notify listener obj {0}", obj);
         boolean removed = false;
         synchronized (notifListeners) {
             Iterator<NotificationHolder> it = notifListeners.iterator();
@@ -387,9 +388,8 @@
                 }
             }
         } catch (Exception ex) {
-            log.log(Level.SEVERE,
-                    "Exception during notification sending: " + ex.getMessage(),
-                    ex);
+            log.warning("Exception during notification sending: " + ex.getMessage());
+            log.log(Level.FINE, "doNotify", ex);
         }
     }
 }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/JMXConfiguration.java
--- a/src/org/opensolaris/opengrok/management/JMXConfiguration.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/JMXConfiguration.java	Mon Feb 13 06:12:47 2012 +0100
@@ -26,8 +26,7 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.util.logging.Level;
-import org.opensolaris.opengrok.OpenGrokLogger;
+
 import org.opensolaris.opengrok.configuration.Configuration;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 
@@ -50,16 +49,12 @@
         try  {
             File file = new File(configfile);
             if (!file.exists()) {
-                if (!file.createNewFile()) {
-                    throw new IOException("Could not create configuration file: '" + configfile + "'");
-                }
+                file.createNewFile();
             }
             RuntimeEnvironment.getInstance().writeConfiguration(file);
         } catch (IOException orig) {
-            IOException ioex = new IOException("Could not create configuration file " + configfile);
-            ioex.initCause(orig);
-            OpenGrokLogger.getLogger().log(Level.SEVERE,"Could not create configfile " + configfile, ioex);
-            throw ioex;
+            throw new IOException("Could not create configuration file '" 
+                + configfile + "'", orig);
         }
     }
 }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/Management.java
--- a/src/org/opensolaris/opengrok/management/Management.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/Management.java	Mon Feb 13 06:12:47 2012 +0100
@@ -36,8 +36,8 @@
 
 public final class Management implements ManagementMBean, MBeanRegistration {
 
+    private static final Logger log = Logger.getLogger(Management.class.getName());
     private static Management managementInstance = null;
-    private static final Logger log = Logger.getLogger("org.opensolaris.opengrok");
     private final Properties ogaProperties;
     private final long startTime; // Stores the time this bean is created
     private Boolean update = Boolean.FALSE;
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/OGAgent.java
--- a/src/org/opensolaris/opengrok/management/OGAgent.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/OGAgent.java	Mon Feb 13 06:12:47 2012 +0100
@@ -62,7 +62,7 @@
 final public class OGAgent {
     Properties props;
 
-    private static final Logger log = Logger.getLogger("org.opensolaris.opengrok");
+    private static final Logger log = Logger.getLogger(OGAgent.class.getName());
     private MBeanServer server = null;
 
 
@@ -77,8 +77,8 @@
             props.load(stream);
             ret = true;
         } catch (IOException e) {
-            System.err.println("Failed to read configuration");
-            e.printStackTrace(System.err);
+            log.warning("Failed to read configuration: " + e.getMessage());
+            log.log(Level.FINE, "loadProperties", e);
             ret = false;
         } finally {
             IOUtils.close(stream);
@@ -111,7 +111,7 @@
                     success = loadProperties(file, null, props);
                 } else {
                     success = false;
-                    System.err.println("Cannot load file \"" + file.getAbsolutePath() + "\": No such file");
+                    log.severe("Cannot load file '" + file.getAbsolutePath() + "': No such file");
                 }
             }
         }
@@ -122,8 +122,8 @@
                 uri = new URI(props.getProperty("agent"));
             } catch (URISyntaxException ex) {
                 success = false;
-                System.err.println("Failed to decode agent url");
-                ex.printStackTrace(System.err);
+                log.severe("Failed to decode agent url: " + ex.getMessage());
+                log.log(Level.FINE, "main", ex);
             }
         }
 
@@ -154,13 +154,16 @@
             try {
                 oga.runOGA();
             } catch (MalformedURLException e) {
-                log.log(Level.SEVERE, "Could not create connector server: " + e, e);
+                log.severe("Could not create connector server: " + e.getMessage());
+                log.log(Level.FINE, "main", e);
                 System.exit(1);
             } catch (IOException e) {
-                log.log(Level.SEVERE, "Could not start connector server: " + e, e);
+                log.severe("Could not start connector server: " + e.getMessage());
+                log.log(Level.FINE, "main", e);
                 System.exit(2);
             } catch (Exception ex) {
-                Logger.getLogger(OGAgent.class.getName()).log(Level.SEVERE, null, ex);
+                log.severe(ex.getMessage());
+                log.log(Level.FINE, "main", ex);
                 System.exit(1);
             }
         } else {
@@ -289,7 +292,7 @@
         try {
             OpenGrokLogger.setupLogger(OGAlogpath, loglevel, consoleloglevel);
         } catch (IOException ex) {
-            System.err.println("OGAgent failed set up logging: " + ex);
+            log.warning("OGAgent failed set up logging: " + ex.getMessage());
             ret = false;
         }
 
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/client/AgentConnection.java
--- a/src/org/opensolaris/opengrok/management/client/AgentConnection.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/client/AgentConnection.java	Mon Feb 13 06:12:47 2012 +0100
@@ -49,7 +49,7 @@
     private MBeanServerConnection server = null;
     private final ObjectName objName;
     private static final String objStrName = "OGA:name=AgentIndexRunner,source=timer";
-    private static final Logger logger = Logger.getLogger("org.opensolaris.opengrok");
+    private static final Logger logger = Logger.getLogger(AgentConnection.class.getName());
     private String agenturl = "";
     private JMXConnector jmxconn = null;
     private boolean connected = false;
@@ -81,7 +81,8 @@
             try {
                 reconnect(1);
             } catch (IOException ex) {
-                Logger.getLogger(AgentConnection.class.getName()).log(Level.SEVERE, null, ex);
+                logger.log(Level.SEVERE, ex.getMessage());
+                logger.log(Level.FINE, "getMBeanServerConnection", ex);
             }
         }
         return server;
@@ -185,14 +186,14 @@
 
     public void registerListener() throws IOException,
             InstanceNotFoundException {
-        logger.fine("Registering listener: " + this.getClass().getName() + " for ObjectName: " + objName);
+        logger.fine("Registering listener " + this.getClass().getName() + " for ObjectName " + objName);
         server.addNotificationListener(objName, this, null, objName);
         logger.fine("Listener Registered");
         listenerRegistered = true;
     }
 
     public void reconnect(int retrytimes) throws MalformedURLException, IOException {
-        logger.fine("Doing reconnect on '" + agenturl + "'");
+        logger.fine("Doing reconnect on " + agenturl);
         boolean notconnected = true;
         int triednumtimes = 0;
         while (notconnected) {
@@ -201,7 +202,7 @@
                 try {
                     jmxconn.close();
                 } catch (Exception ex) {
-                    logger.warning("Exception during close " + ex);
+                    logger.warning("Exception during close " + ex.getMessage());
                 }
             }
             try {
@@ -222,7 +223,7 @@
                     try {
                         Thread.sleep(RECONNECT_SLEEPTIME);
                     } catch (Exception sleepex) {
-                        logger.finest("Thread.sleep exception " + sleepex);
+                        logger.finest("reconnect: " + sleepex.getMessage());
                     }
 
                 } else {
@@ -251,11 +252,11 @@
     public void unregister() {
         if ((server != null) && (objName != null) && listenerRegistered) {
             try {
-                logger.fine("Unregistering listener: " + this.getClass().getName() + " for ObjectName: " + objName);
+                logger.fine("Unregistering listener " + this.getClass().getName() + " for ObjectName " + objName);
                 server.removeNotificationListener(objName, this, null, objName);
                 listenerRegistered = false;
             } catch (Exception remnlex) {
-                logger.severe("Exception unregister notif listener: '" + this.getClass().getName() + "' for ObjectName: " + objName + "'");
+                logger.warning("Exception unregister notif listener " + this.getClass().getName() + " for ObjectName " + objName);
             }
         }
 
@@ -268,7 +269,8 @@
                 server = null;
             }
         } catch (Exception e) {
-            logger.log(Level.SEVERE, "Exception disconnecting " + e.getMessage(), e);
+            logger.log(Level.WARNING, "disconnect: " + e.getMessage());
+            logger.log(Level.FINE, "unregister", e);
         }
 
     }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/client/ConfigurationsFrame.java
--- a/src/org/opensolaris/opengrok/management/client/ConfigurationsFrame.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/client/ConfigurationsFrame.java	Mon Feb 13 06:12:47 2012 +0100
@@ -29,6 +29,7 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import javax.management.Attribute;
 import javax.management.AttributeNotFoundException;
 import javax.management.InstanceNotFoundException;
@@ -38,7 +39,7 @@
 import javax.management.ObjectName;
 import javax.management.ReflectionException;
 import javax.swing.table.DefaultTableModel;
-import org.opensolaris.opengrok.OpenGrokLogger;
+
 import org.opensolaris.opengrok.configuration.Configuration;
 import org.opensolaris.opengrok.configuration.Project;
 import org.opensolaris.opengrok.history.RepositoryInfo;
@@ -52,8 +53,8 @@
 @SuppressWarnings("PMD.SingularField")
 public class ConfigurationsFrame extends javax.swing.JFrame {
 
+    private static final Logger logger = Logger.getLogger(ConfigurationsFrame.class.getName());
     AgentConnection con;
-    private static final Logger logger = OpenGrokLogger.getLogger();
     private static final Level[] levels = new Level[]{Level.ALL,
     Level.CONFIG, Level.FINE,Level.FINER,Level.FINEST,Level.INFO,Level.OFF,
     Level.SEVERE, Level.WARNING};
@@ -130,15 +131,20 @@
                config = Configuration.makeXMLStringAsConfiguration(xmlconfig);
                this.updateConfigFieldsFromConfig();
             } catch (MBeanException ex) {
-                logger.log(Level.SEVERE, "", ex);
+                logger.warning(ex.getMessage());
+                logger.log(Level.FINE, "getConfigsFromAgent", ex);
             } catch (AttributeNotFoundException ex) {
-                Logger.getLogger(ConfigurationsFrame.class.getName()).log(Level.SEVERE, null, ex);
+                logger.warning(ex.getMessage());
+                logger.log(Level.FINE, "getConfigsFromAgent", ex);
             } catch (InstanceNotFoundException ex) {
-                Logger.getLogger(ConfigurationsFrame.class.getName()).log(Level.SEVERE, null, ex);
+                logger.warning(ex.getMessage());
+                logger.log(Level.FINE, "getConfigsFromAgent", ex);
             } catch (ReflectionException ex) {
-                Logger.getLogger(ConfigurationsFrame.class.getName()).log(Level.SEVERE, null, ex);
+                logger.warning(ex.getMessage());
+                logger.log(Level.FINE, "getConfigsFromAgent", ex);
             } catch (IOException ex) {
-                Logger.getLogger(ConfigurationsFrame.class.getName()).log(Level.SEVERE, null, ex);
+                logger.warning(ex.getMessage());
+                logger.log(Level.FINE, "getConfigsFromAgent", ex);
             }
         }
     }
@@ -855,7 +861,8 @@
                 try {
                     new ConfigurationsFrame(null).setVisible(true);
                 } catch (IOException ex) {
-                    Logger.getLogger(ConfigurationsFrame.class.getName()).log(Level.SEVERE, null, ex);
+                    logger.warning(ex.getMessage());
+                    logger.log(Level.FINE, "main", ex);
                 }
             }
         });
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/client/OpenGrokTrayApp.java
--- a/src/org/opensolaris/opengrok/management/client/OpenGrokTrayApp.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/client/OpenGrokTrayApp.java	Mon Feb 13 06:12:47 2012 +0100
@@ -35,6 +35,7 @@
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import org.opensolaris.opengrok.OpenGrokLogger;
 
 /**
@@ -43,10 +44,10 @@
  */
 public class OpenGrokTrayApp {
 
+    private static final Logger log = Logger.getLogger(OpenGrokTrayApp.class.getName());
     private static TrayIcon trayIcon;
     private static String cfgfile;
     private final SettingsPersistence settings;
-    private static final Logger log = OpenGrokLogger.getLogger();
     public static final String OPENGROKICONURL = "opengrok.gif";
     public static final String INDEXWARNINGICONURL = "opengrok_indexwarning.gif";
     public static final String NOCONNECTIONICONURL = "opengrok_noconnection.gif";
@@ -76,7 +77,8 @@
             OpenGrokTrayApp ogta = new OpenGrokTrayApp(cfgfile);
             ogta.enableSystemTray();
         } catch (IOException ex) {
-            log.log(Level.SEVERE, "Exception starting ", ex);
+            log.severe(ex.getMessage());
+            log.log(Level.FINE, "main", ex);
         }
     }
 
@@ -134,8 +136,8 @@
                     sf = new ConfigurationsFrame(agent);
                     sf.setVisible(true);
                 } catch (IOException ex) {
-                    Logger.getLogger(OpenGrokTrayApp.class.getName()).log(Level.SEVERE, null, ex);
-
+                    log.warning(ex.getLocalizedMessage());
+                    log.log(Level.FINE, "actionPerformed", e);
                 }
 
                 log.finer("Done config");
@@ -382,7 +384,8 @@
             try {
                 tray.add(trayIcon);
             } catch (AWTException e) {
-                log.log(Level.WARNING, "TrayIcon could not be added.", e);
+                log.log(Level.WARNING, "TrayIcon could not be added: " + e.getMessage());
+                log.log(Level.FINE, "enableSystemTray", e);
             }
             log.info("Created, ready for action");
 
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/client/SettingsFrame.java
--- a/src/org/opensolaris/opengrok/management/client/SettingsFrame.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/client/SettingsFrame.java	Mon Feb 13 06:12:47 2012 +0100
@@ -90,7 +90,6 @@
      * WARNING: Do NOT modify this code. The content of this method is
      * always regenerated by the Form Editor.
      */
-    @SuppressWarnings("unchecked")
     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
     private void initComponents() {
 
@@ -276,11 +275,14 @@
     */
     public static void main(String args[]) {
         java.awt.EventQueue.invokeLater(new Runnable() {
+            @Override
             public void run() {
             try {
                new SettingsFrame(new SettingsPersistence(null)).setVisible(true);
             } catch (IOException ex) {
-               Logger.getLogger(SettingsFrame.class.getName()).log(Level.SEVERE, null, ex);
+               Logger logger = Logger.getLogger(SettingsFrame.class.getName());
+               logger.severe(ex.getMessage());
+               logger.log(Level.FINE, "run", ex);
             }
             }
         });
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/management/client/ShowErrorForm.java
--- a/src/org/opensolaris/opengrok/management/client/ShowErrorForm.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/management/client/ShowErrorForm.java	Mon Feb 13 06:12:47 2012 +0100
@@ -137,9 +137,11 @@
     */
     public static void main(String args[]) {
         java.awt.EventQueue.invokeLater(new Runnable() {
+            @Override
             public void run() {
                 ShowErrorForm dialog = new ShowErrorForm(new javax.swing.JFrame(), true,"Test Message");
                 dialog.addWindowListener(new java.awt.event.WindowAdapter() {
+                    @Override
                     public void windowClosing(java.awt.event.WindowEvent e) {
                         System.exit(0);
                     }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/search/Results.java
--- a/src/org/opensolaris/opengrok/search/Results.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/search/Results.java	Mon Feb 13 06:12:47 2012 +0100
@@ -35,14 +35,14 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.logging.Level;
+import java.util.logging.Logger;
 import java.util.zip.GZIPInputStream;
 
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.ScoreDoc;
-import org.apache.lucene.search.IndexSearcher;
-import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
 import org.opensolaris.opengrok.analysis.TagFilter;
@@ -56,6 +56,7 @@
  * @author Chandan slightly rewritten by Lubos Kosco
  */
 public final class Results {
+    private static final Logger logger = Logger.getLogger(Results.class.getName());
     private Results() {
         // Util class, should not be constructed
     }
@@ -111,9 +112,9 @@
             int len = r.read(content);
             return new String(content, 0, len);
         } catch (Exception e) {
-            OpenGrokLogger.getLogger().log(
-                Level.WARNING, "An error reading tags from " + basedir + path
-                    + (compressed ? ".gz" : ""), e);
+            logger.warning("An error reading tags from '" + basedir + path
+                    + (compressed ? ".gz': " : "': ") + e.getMessage());
+            logger.log(Level.FINE, "getTags", e);
         } finally {
             IOUtils.close(r);
             IOUtils.close(gis);
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/search/SearchEngine.java
--- a/src/org/opensolaris/opengrok/search/SearchEngine.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/search/SearchEngine.java	Mon Feb 13 06:12:47 2012 +0100
@@ -24,13 +24,22 @@
 
 package org.opensolaris.opengrok.search;
 
-import java.io.*;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.logging.Level;
+import java.util.logging.Logger;
 import java.util.zip.GZIPInputStream;
+
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Fieldable;
 import org.apache.lucene.index.IndexReader;
@@ -41,7 +50,6 @@
 import org.apache.lucene.search.TopScoreDocCollector;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.util.Version;
-import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.CompatibleAnalyser;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
@@ -63,6 +71,7 @@
  * @author Lubos Kosco 2011 - upgrade to lucene 3.5.0
  */
 public class SearchEngine {
+    private static final Logger logger = Logger.getLogger(SearchEngine.class.getName());
     /** Message text used when logging exceptions thrown when searching. */
     private static final String SEARCH_EXCEPTION_MSG = "Exception searching";
 
@@ -249,8 +258,8 @@
                 }
             }
         } catch (Exception e) {
-            OpenGrokLogger.getLogger().log(
-                    Level.WARNING, SEARCH_EXCEPTION_MSG, e);
+            logger.warning(SEARCH_EXCEPTION_MSG + ": " + e.getMessage());
+            logger.log(Level.FINE, "search", e);
         }
 
         if (!docs.isEmpty()) {
@@ -263,7 +272,9 @@
                 }
                 summarizer = new Summarizer(query, analyzer);
             } catch (Exception e) {
-                OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while creating summary", e);
+                logger.warning("An error occured while creating summary: " 
+                    + e.getMessage());
+                logger.log(Level.FINE, "search", e);
             }
 
             historyContext = null;
@@ -273,7 +284,9 @@
                     historyContext = null;
                 }
             } catch (Exception e) {
-                OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while getting history context", e);
+                logger.warning("An error occured while getting history context: " 
+                    + e.getMessage());
+                logger.log(Level.FINE, "search", e);
             }
         }
         int count=hits==null?0:hits.length;
@@ -306,8 +319,8 @@
          try {
              searcher.search(query,collector);
          } catch (Exception e) { // this exception should never be hit, since search() will hit this before
-                 OpenGrokLogger.getLogger().log(
-                         Level.WARNING, SEARCH_EXCEPTION_MSG, e);
+             logger.warning(SEARCH_EXCEPTION_MSG + ": " + e.getMessage());
+             logger.log(Level.FINE, "results", e);    
          }
          hits = collector.topDocs().scoreDocs;
          Document d=null;
@@ -316,8 +329,8 @@
              try {
                  d = searcher.doc(docId);
              }  catch (Exception e) {
-                 OpenGrokLogger.getLogger().log(
-                         Level.SEVERE, SEARCH_EXCEPTION_MSG, e);
+                 logger.warning(SEARCH_EXCEPTION_MSG + ": " + e.getMessage());
+                 logger.log(Level.FINE, "results", e);
              }
              docs.add(d);
          }
@@ -373,11 +386,13 @@
                                 }
                             }
                         } else {
-                            OpenGrokLogger.getLogger().warning("Unknown genre: " + genre + " for "+filename);
+                            logger.warning("Unknown genre '" + genre + "' for '"
+                                + filename + "'");
                             hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, ret);
                         }
                     } catch (FileNotFoundException exp) {
-                        OpenGrokLogger.getLogger().warning("Couldn't read summary from "+filename+" ("+exp.getMessage()+")");
+                        logger.warning("Couldn't read summary from '"
+                            + filename + "': " + exp.getMessage());
                         hasContext |= sourceContext.getContext(null, null, null, null, filename, tags, false, ret);
                     }
                 }
@@ -388,14 +403,14 @@
                     ret.add(new Hit(filename, "...", "", false, alt));
                 }
             } catch (IOException e) {
-                OpenGrokLogger.getLogger().log(
-                        Level.WARNING, SEARCH_EXCEPTION_MSG, e);
+                logger.warning(SEARCH_EXCEPTION_MSG + ": " + e.getMessage());
+                logger.log(Level.FINE, "results", e);
             } catch (ClassNotFoundException e) {
-                OpenGrokLogger.getLogger().log(
-                        Level.WARNING, SEARCH_EXCEPTION_MSG, e);
+                logger.warning(SEARCH_EXCEPTION_MSG + ": " + e.getMessage());
+                logger.log(Level.FINE, "results", e);
             } catch (HistoryException e) {
-                OpenGrokLogger.getLogger().log(
-                        Level.WARNING, SEARCH_EXCEPTION_MSG, e);
+                logger.warning(SEARCH_EXCEPTION_MSG + ": " + e.getMessage());
+                logger.log(Level.FINE, "results", e);
             }
         }
 
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/search/context/Context.java
--- a/src/org/opensolaris/opengrok/search/context/Context.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/search/context/Context.java	Mon Feb 13 06:12:47 2012 +0100
@@ -37,8 +37,9 @@
 import java.util.Map;
 import java.util.TreeMap;
 import java.util.logging.Level;
+import java.util.logging.Logger;
+
 import org.apache.lucene.search.Query;
-import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.Definitions;
 import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
 import org.opensolaris.opengrok.search.Hit;
@@ -47,6 +48,7 @@
 
 public class Context {
 
+    private static final Logger logger = Logger.getLogger(Context.class.getName());
     private final LineMatcher[] m;
     static final int MAXFILEREAD = 1024 * 1024;
     private char[] buffer;
@@ -187,7 +189,9 @@
             } catch (Exception e) {
                 if (hits != null) {
                     // @todo verify why we ignore all exceptions?
-                    OpenGrokLogger.getLogger().log(Level.WARNING, "Could not get context for " + path, e);
+                    logger.warning("Could not get context for '" + path + "': " 
+                        + e.getMessage());
+                    logger.log(Level.FINE, "getContext", e);
                 }
             }
         }
@@ -223,7 +227,8 @@
                     }
                 }
             } catch (IOException e) {
-                OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while reading data", e);
+                logger.warning("An error occured while reading data: " + e.getMessage());
+                logger.log(Level.FINE, "getContext", e);
                 return anything;
             }
             if (charsRead == 0) {
@@ -266,15 +271,18 @@
                 out.write("<a href=\"" + Util.URIEncodePath(morePrefix) + pathE + "?" + queryAsURI + "\">[all...]</a>");
             }
         } catch (IOException e) {
-            OpenGrokLogger.getLogger().log(Level.WARNING, "Could not get context for " + path, e);
+            logger.warning("Could not get context for '" + path + "': " 
+                + e.getMessage());
+            logger.log(Level.FINE, "getContext", e);
         } finally {
             IOUtils.close(in);
-            
+            // don't close
             if (out != null) {
                 try {
                     out.flush();
                 } catch (IOException e) {
-                    OpenGrokLogger.getLogger().log(Level.WARNING, "Failed to flush stream: ", e);
+                    logger.warning("Failed to flush stream: " + e.getMessage());
+                    logger.log(Level.FINE, "getContext", e);
                 }
             }
         }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/search/context/HistoryContext.java
--- a/src/org/opensolaris/opengrok/search/context/HistoryContext.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/search/context/HistoryContext.java	Mon Feb 13 06:12:47 2012 +0100
@@ -31,9 +31,9 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.logging.Level;
+import java.util.logging.Logger;
+
 import org.apache.lucene.search.Query;
-import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.history.History;
 import org.opensolaris.opengrok.history.HistoryEntry;
 import org.opensolaris.opengrok.history.HistoryException;
@@ -46,6 +46,7 @@
  * since lucene does not easily give the match context.
  */
 public class HistoryContext {
+    private static final Logger logger = Logger.getLogger(HistoryContext.class.getName());
     private final LineMatcher[] m;
     HistoryLineTokenizer tokens;
 
@@ -179,7 +180,8 @@
                 }
             }
         } catch (Exception e) {
-            OpenGrokLogger.getLogger().log(Level.WARNING, "Could not get history context for " + path, e);
+            logger.warning("Could not get history context for '" + path + "': " 
+                + e.getMessage());
         }
         return matchedLines > 0;
     }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/util/Executor.java
--- a/src/org/opensolaris/opengrok/util/Executor.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/util/Executor.java	Mon Feb 13 06:12:47 2012 +0100
@@ -36,8 +36,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.opensolaris.opengrok.OpenGrokLogger;
-
 /**
  * Wrapper to Java Process API
  *
@@ -119,8 +117,7 @@
             }
         }
 
-        OpenGrokLogger.getLogger().log(Level.FINE,
-                "Executing command {0} in directory {1}",
+        log.log(Level.FINE, "Executing command [{0}] in directory ''{1}''",
                 new Object[] {
                     processBuilder.command(),
                     processBuilder.directory(),
@@ -140,8 +137,9 @@
                         err.processStream(errorStream);
                     } catch (IOException ex) {
                         if (reportExceptions) {
-                            OpenGrokLogger.getLogger().log(Level.SEVERE,
-                                    "Error during process pipe listening", ex);
+                            log.warning("Error during process pipe listening: " 
+                                + ex.getMessage());
+                            log.log(Level.FINE, "run", ex);
                         }
                     }
                 }
@@ -156,13 +154,15 @@
             stderr = err.getBytes();
         } catch (IOException e) {
             if (reportExceptions) {
-                OpenGrokLogger.getLogger().log(Level.SEVERE,
-                        "Failed to read from process: " + cmdList.get(0), e);
+                log.warning("Failed to read from process " + cmdList.get(0)
+                    + ": " + e.getMessage());
+                log.log(Level.FINE, "exec", e);
             }
         } catch (InterruptedException e) {
             if (reportExceptions) {
-                OpenGrokLogger.getLogger().log(Level.SEVERE,
-                        "Waiting for process interrupted: " + cmdList.get(0), e);
+                log.warning("Waiting for process interrupted: " + cmdList.get(0)
+                    + ": " + e.getMessage());
+                log.log(Level.FINE, "exec", e);
             }
         } finally {
             try {
@@ -177,9 +177,9 @@
         if (ret != 0 && reportExceptions) {
             int MAX_MSG_SZ = 512; /* limit to avoid floodding the logs */
             StringBuilder msg = new StringBuilder("Non-zero exit status ")
-                    .append(ret).append(" from command ")
+                    .append(ret).append(" from command [")
                     .append(processBuilder.command().toString())
-                    .append(" in directory ");
+                    .append("] in directory '");
             File cwd = processBuilder.directory();
             if (cwd == null) {
                 msg.append(System.getProperty("user.dir"));
@@ -187,14 +187,16 @@
                 msg.append(cwd.toString());
             }
             if (stderr != null && stderr.length > 0) {
-                    msg.append(": ");
+                    msg.append("': ");
                     if (stderr.length > MAX_MSG_SZ) {
                             msg.append(new String(stderr, 0, MAX_MSG_SZ)).append("...");
                     } else {
                             msg.append(new String(stderr));
                     }
+            } else {
+                msg.append("'");
             }
-            OpenGrokLogger.getLogger().log(Level.WARNING, msg.toString());
+            log.warning(msg.toString());
         }
 
         return ret;
@@ -303,13 +305,16 @@
     }
     
     public static void registerErrorHandler() {
+        Thread.currentThread();
         UncaughtExceptionHandler dueh =
-            Thread.currentThread().getDefaultUncaughtExceptionHandler();
+            Thread.getDefaultUncaughtExceptionHandler();
         if (dueh == null) {
             log.fine("Installing default uncaught exception handler");
             Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {
                 @Override
                 public void uncaughtException(Thread t, Throwable e) {
+                    // this should be the only one case, where an exception 
+                    // stack trace gets logged with a Level > FINE !!!
                     log.log(Level.SEVERE, "Uncaught exception in thread " 
                         + t.getName() + " with ID " + t.getId() + ": "
                         + e.getMessage(), e);
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/util/IOUtils.java
--- a/src/org/opensolaris/opengrok/util/IOUtils.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/util/IOUtils.java	Mon Feb 13 06:12:47 2012 +0100
@@ -44,32 +44,50 @@
         // singleton
     }
 
-    public static void close(Closeable c) {
+    /**
+     * Try to close the given object if not {@code null} and log errors if an 
+     * exception  occures.
+     * @param c object to close.
+     */
+    public static final void close(Closeable c) {
         if (c != null) {
             try {
                 c.close();
             } catch (IOException e) {
-                log.log(Level.WARNING, "Failed to close resource: ", e);
+                log.warning("Failed to close resource: " + e.getMessage());
+                log.log(Level.FINE, "close", e);
             }
         }
     }
 
-    public static void close(ServerSocket sock) {
+    /**
+     * Try to close the given socket if not {@code null} and log errors if an 
+     * exception  occures.
+     * @param sock socket to close.
+     */
+    public static final void close(ServerSocket sock) {
         if (sock != null) {
             try {
                 sock.close();
             } catch (IOException e) {
-                log.log(Level.WARNING, "Failed to close socket: ", e);
+                log.warning("Failed to close socket: " + e.getMessage());
+                log.log(Level.FINE, "close", e);
             }
         }
     }
 
-    public static void close(Socket sock) {
+    /**
+     * Try to close the given socket if not {@code null} and log errors if an 
+     * exception  occures.
+     * @param sock socket to close.
+     */
+    public static final void close(Socket sock) {
         if (sock != null) {
             try {
                 sock.close();
             } catch (IOException e) {
-                log.log(Level.WARNING, "Failed to close socket: ", e);
+                log.warning("Failed to close socket: " + e.getMessage());
+                log.log(Level.FINE, "close", e);
             }
         }
     }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/web/EftarFile.java
--- a/src/org/opensolaris/opengrok/web/EftarFile.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/web/EftarFile.java	Mon Feb 13 06:12:47 2012 +0100
@@ -36,7 +36,8 @@
 import java.util.StringTokenizer;
 import java.util.TreeMap;
 import java.util.logging.Level;
-import org.opensolaris.opengrok.OpenGrokLogger;
+import java.util.logging.Logger;
+
 import org.opensolaris.opengrok.util.IOUtils;
 
 /**
@@ -265,7 +266,9 @@
             EftarFile ef = new EftarFile();
             ef.create(args);
         } catch (Exception e) {
-            OpenGrokLogger.getLogger().log(Level.WARNING, "EftarFile error", e);
+            Logger logger = Logger.getLogger(EftarFile.class.getName());
+            logger.warning("EftarFile error: " + e.getMessage());
+            logger.log(Level.FINE, "main", e);
         }
     }
 
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/web/EftarFileReader.java
--- a/src/org/opensolaris/opengrok/web/EftarFileReader.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/web/EftarFileReader.java	Mon Feb 13 06:12:47 2012 +0100
@@ -43,7 +43,6 @@
 
     private final RandomAccessFile f;
     private boolean isOpen;
-    private static final Logger log = Logger.getLogger(EftarFileReader.class.getName());
 
     public class FNode {
 
@@ -128,7 +127,9 @@
             } catch (EOFException e) { // NOPMD
                 // ignore
             } catch (IOException e) {
-                log.log(Level.WARNING, "Got excption while getting the tag: ", e);
+                Logger log = Logger.getLogger(EftarFileReader.class.getName());
+                log.warning("Got exception while getting the tag: " + e.getMessage());
+                log.log(Level.FINE, "toString", e);
             }
             return "H[" + hash + "] num = " + numChildren + " tag = " + tagString;
         }
diff -r 61549026aafe -r 261116507c7a src/org/opensolaris/opengrok/web/PageConfig.java
--- a/src/org/opensolaris/opengrok/web/PageConfig.java	Sun Feb 12 04:37:36 2012 +0100
+++ b/src/org/opensolaris/opengrok/web/PageConfig.java	Mon Feb 13 06:12:47 2012 +0100
@@ -236,7 +236,8 @@
                             filepath[i] + "@" + data.rev[i], null);
                     data.param[i] = u.getRawQuery();
                 } catch (URISyntaxException e) {
-                    log.log(Level.WARNING, "Failed to create URI: ", e);
+                    log.warning("Failed to create URI: " + e.getMessage());
+                    log.log(Level.FINE, "getDiffData", e);
                 }
             }
             data.full = fullDiff();
@@ -376,7 +377,8 @@
                     ret = x;
                 }
             } catch (Exception e) {
-                log.log(Level.INFO, "Failed to parse integer " + s, e);
+                log.info("Failed to parse integer " + s);
+                log.log(Level.FINE, "getIntParam", e);
             }
         }
         return ret;
@@ -480,7 +482,7 @@
                 try {
                     eftarReader = new EftarFileReader(f);
                 } catch (Exception e) {
-                    log.log(Level.FINE, "Failed to create EftarFileReader: ", e);
+                    log.log(Level.FINE, "Failed to create EftarFileReader", e);
                 }
             }
         }
@@ -501,7 +503,8 @@
                 dtag = eftarReader.get(getPath());
                 // cfg.getPrefix() != Prefix.XREF_S) {
             } catch (IOException e) {
-                log.log(Level.INFO, "Failed to get entry from eftar reader: ", e);
+                log.info("Failed to get entry from eftar reader: " + e.getMessage());
+                log.log(Level.FINE, "getDefineTagsIndex", e);
             }
         }
         if (dtag == null) {
@@ -574,7 +577,8 @@
         try {
             annotation = HistoryGuru.getInstance().annotate(resourceFile, rev.isEmpty() ? null 