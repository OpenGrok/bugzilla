//********************************************************************          
// HEADER  = SFLCMP         VERSION = A0                             *          
//********************************************************************          
//********************************************************************          
//                                                                   *          
// HEADER FILE NAME..SFLCMP.H                                        *          
// HEADER FILE TYPE..TPF                                             *          
// DOCUMENT NAME...  None                                            *          
// DESCRIPTION.....  Standard Function Library                       *          
// LEVEL...........  VERSION 1  MODIFICATION 0                       *          
//                                                                   *          
// FUNCTION... Compression functions.                                *          
//                                                                   *          
//********************************************************************          
//                                                                   *          
// DLL                                                               *          
//   . U204                                                          *          
//                                                                   *          
// DEPENDENCIES:                                                     *          
//   . None                                                          *          
//                                                                   *          
// RESTRICTIONS:                                                     *          
//   . None                                                          *          
//                                                                   *          
// SPECIAL CONSIDERATIONS:                                           *          
//   . None                                                          *          
//                                                                   *          
//********************************************************************          
//                          WSP ACTIVITY LOG                         *          
//                         -----------------                         *          
//                                                                   *          
// CHANGE   PROGRAMMER  DESCRIPTION                    VERSION  DATE *          
// NUMBER      NAME     OF THE CHANGE                  NEW/FBK  MM/YR*          
//--------  ----------  -----------------------------  -------  -----*          
//CS19351   Rebel       Create header                   A0/--   05/03*          
//                                                                   *          
//********************************************************************          
/*  ----------------------------------------------------------------<Prolog>-   
    Name:       sflcomp.h                                                       
    Title:      Compression functions                                           
    Package:    Standard Function Library (SFL)                                 
    Written:    91/05/20  iMatix SFL project team <sfl@imatix.com>              
    Revised:    97/09/08                                                        
    Synopsis:   Various compression/decompression functions.  The LZ-type       
                algorith (LZRW1/KH) was originally written by Kurt Haenen       
                <ghgaea8@blekul11> and made portable by P. Hintjens. This       
                is a reasonable LZ/RLE algorithm, very fast, but about 30%      
                less efficient than a ZIP-type algorithm in terms of space.     
                The RLE algorithms are better suited to compressing sparse      
                data.  The nulls variant is specifically tuned to data that     
                consists mostly of binary zeroes.  The bits variant is          
                tuned for compressing sparse bitmaps.                           
    Copyright:  Copyright (c) 1991-99 iMatix Corporation                        
    License:    This is free software; you can redistribute it and/or modify    
                it under the terms of the SFL License Agreement as provided     
                in the file LICENSE.TXT.  This software is distributed in       
                the hope that it will be useful, but without any warranty.      
 ------------------------------------------------------------------</Prolog>-*/ 
#ifndef SFLCOMP_INCLUDED               /*  Allow multiple inclusions        */  
#define SFLCOMP_INCLUDED                                                        
                                                                                
//****************************************************************************  
//                              Includes                                     *  
//****************************************************************************  
#include <sflpre.h>                                                             
                                                                                
//****************************************************************************  
//                              Prototypes                                   *  
//****************************************************************************  
#ifdef __cplusplus                                                              
extern "C" {                                                                    
#endif                                                                          
                                                                                
word compress_block (const byte *source, byte *dest, word source_size);         
word expand_block   (const byte *source, byte *dest, word source_size);         
word compress_rle   (      byte *source, byte *dest, word source_size);         
word expand_rle     (const byte *source, byte *dest, word source_size);         
word compress_nulls (      byte *source, byte *dest, word source_size);         
word expand_nulls   (const byte *source, byte *dest, word source_size);         
word compress_bits  (      byte *source, byte *dest, word source_size);         
word expand_bits    (const byte *source, byte *dest, word source_size);         
                                                                                
#ifdef __cplusplus                                                              
}                                                                               
#endif                                                                          
                                                                                
//****************************************************************************  
//                            Pragma maps                                    *  
//****************************************************************************  
#ifdef __370__
#pragma map(compress_block,"U2040181")                                          
#else
  #define compress_block U2040181
#endif
#ifdef __370__
#pragma map(expand_block  ,"U2040182")                                          
#else
  #define expand_block   U2040182
#endif
#ifdef __370__
#pragma map(compress_rle  ,"U2040183")                                          
#else
  #define compress_rle   U2040183
#endif
#ifdef __370__
#pragma map(expand_rle    ,"U2040184")                                          
#else
  #define expand_rle     U2040184
#endif
#ifdef __370__
#pragma map(compress_nulls,"U2040185")                                          
#else
  #define compress_nulls U2040185
#endif
#ifdef __370__
#pragma map(expand_nulls  ,"U2040186")                                          
#else
  #define expand_nulls   U2040186
#endif
#ifdef __370__
#pragma map(compress_bits ,"U2040187")                                          
#else
  #define compress_bits  U2040187
#endif
#ifdef __370__
#pragma map(expand_bits   ,"U2040188")                                          
#else
  #define expand_bits    U2040188
#endif
                                                                                
//****************************************************************************  
//                            end sflcmp                                     *  
//****************************************************************************  
                                                                                
#endif                                                                          
