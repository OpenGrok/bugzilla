*** JarAnalyzer.java.dist	Wed Jan  5 03:59:31 2011
--- JarAnalyzer.java	Fri Jun 24 13:55:32 2011
***************
*** 44,49 ****
--- 44,53 ----
  import org.opensolaris.opengrok.analysis.List2TokenStream;
  import org.opensolaris.opengrok.analysis.TagFilter;
  import org.opensolaris.opengrok.analysis.plain.PlainFullTokenizer;
+ import java.util.logging.Level;
+ import java.util.logging.Logger;
+ import org.opensolaris.opengrok.OpenGrokLogger;
+ 
  
  /**
   * Analyzes JAR, WAR, EAR (Java Archive) files.
***************
*** 58,63 ****
--- 62,69 ----
      private List<String> defs;
      private List<String> refs;
      private StringWriter xref;
+     
+     private static final Logger log = Logger.getLogger(JarAnalyzer.class.getName());
  
      private static final Reader dummy = new StringReader("");
      protected JarAnalyzer(FileAnalyzerFactory factory) {
***************
*** 73,121 ****
  
          ZipInputStream zis = new ZipInputStream(in);
          ZipEntry entry;
!         byte buf[] = new byte[1024];
!         while ((entry = zis.getNextEntry()) != null) {
!             String ename = entry.getName();
!             xref.write("<br/><b>"+ ename + "</b>");
!             fullText.append(ename);
!             fullText.append('\n');
!             int len = 0;
!             FileAnalyzerFactory fac = AnalyzerGuru.find(ename);
!             if (fac instanceof JavaClassAnalyzerFactory) {
!                 JavaClassAnalyzer jca =
!                     (JavaClassAnalyzer) fac.getAnalyzer();
!                 BufferedInputStream bif = new BufferedInputStream(zis);
!                 int r;
!                 while((r = bif.read(buf)) > 0) {
!                     if( len + r > content.length) {
!                         byte[] content2 = new byte[content.length*2];
!                         System.arraycopy(content, 0, content2, 0, len);
!                         content = content2;
!                     }
!                     System.arraycopy(buf, 0, content, len, r);
!                     len += r;
!                 }
!                 jca.analyze(doc, new ByteArrayInputStream(content));
!                 doc.removeField("defs");
!                 doc.removeField("refs");
!                 doc.removeField("full");
!                 defs.addAll(jca.getDefs());
!                 refs.addAll(jca.getRefs());
!                 fullText.append(jca.getFull());
!                 xref.write("<pre>");
!                 jca.writeXref(xref);
!                 xref.write("</pre>");
!             }
!         }
!         doc.add(new Field("full", new TagFilter(new StringReader(fullText.toString()))));
!         if(!defs.isEmpty()) {
!             doc.add(new Field("defs",dummy));
!         }
!         if(!refs.isEmpty()) {
!             doc.add(new Field("refs",dummy));
          }
      }
!     
      public TokenStream tokenStream(String fieldName, Reader reader) {
          if ("defs".equals(fieldName)) {
              return new List2TokenStream(defs);
--- 79,133 ----
  
          ZipInputStream zis = new ZipInputStream(in);
          ZipEntry entry;
!         
!         try {
!         	byte buf[] = new byte[1024];
!         	while ((entry = zis.getNextEntry()) != null) {
!         		String ename = entry.getName();
!         		xref.write("<br/><b>"+ ename + "</b>");
!         		fullText.append(ename);
!         		fullText.append('\n');
!         		int len = 0;
!         		FileAnalyzerFactory fac = AnalyzerGuru.find(ename);
!         		if (fac instanceof JavaClassAnalyzerFactory) {
!         			JavaClassAnalyzer jca =
!         				(JavaClassAnalyzer) fac.getAnalyzer();
!         			BufferedInputStream bif = new BufferedInputStream(zis);
!         			int r;
!         			while((r = bif.read(buf)) > 0) {
!         				if( len + r > content.length) {
!         					byte[] content2 = new byte[content.length*2];
!         					System.arraycopy(content, 0, content2, 0, len);
!         					content = content2;
!         				}
!         				System.arraycopy(buf, 0, content, len, r);
!         				len += r;
!         			}
!         			jca.analyze(doc, new ByteArrayInputStream(content));
!         			doc.removeField("defs");
!         			doc.removeField("refs");
!         			doc.removeField("full");
!         			defs.addAll(jca.getDefs());
!         			refs.addAll(jca.getRefs());
!         			fullText.append(jca.getFull());
!         			xref.write("<pre>");
!         			jca.writeXref(xref);
!         			xref.write("</pre>");
!         		}
!         	}
!         	doc.add(new Field("full", new TagFilter(new StringReader(fullText.toString()))));
!         	if(!defs.isEmpty()) {
!         		doc.add(new Field("defs",dummy));
!         	}
!         	if(!refs.isEmpty()) {
!         		doc.add(new Field("refs",dummy));
!         	}
!         } catch (final java.lang.OutOfMemoryError e) {
!         	log.log(Level.SEVERE, "Out of memory error!  Increase your -Xmx value!  Aborting!") ;
!         	System.exit(1);
          }
      }
! 
      public TokenStream tokenStream(String fieldName, Reader reader) {
          if ("defs".equals(fieldName)) {
              return new List2TokenStream(defs);
