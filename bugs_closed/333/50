diff -upwrN opengrok-0.5-org/build.xml opengrok-0.5/build.xml
--- opengrok-0.5-org/build.xml	2007-08-21 11:36:48.000000000 -0400
+++ opengrok-0.5/build.xml	2007-12-24 21:05:53.000000000 -0500
@@ -55,6 +55,8 @@ ident	"%Z%%M% %I%     %E% SMI"
         <jflex file="src/org/opensolaris/opengrok/analysis/java/JavaXref.lex" destdir="${gensrcdir}"/>
         <jflex file="src/org/opensolaris/opengrok/analysis/lisp/LispSymbolTokenizer.lex" destdir="${gensrcdir}"/>
         <jflex file="src/org/opensolaris/opengrok/analysis/lisp/LispXref.lex" destdir="${gensrcdir}"/>
+        <jflex file="src/org/opensolaris/opengrok/analysis/tcl/TclSymbolTokenizer.lex" destdir="${gensrcdir}"/>
+        <jflex file="src/org/opensolaris/opengrok/analysis/tcl/TclXref.lex" destdir="${gensrcdir}"/>
         <jflex file="src/org/opensolaris/opengrok/analysis/plain/PlainFullTokenizer.lex" destdir="${gensrcdir}"/>
         <jflex file="src/org/opensolaris/opengrok/analysis/plain/PlainSymbolTokenizer.lex" destdir="${gensrcdir}"/>
         <jflex file="src/org/opensolaris/opengrok/analysis/plain/PlainXref.lex" destdir="${gensrcdir}"/>
Binary files opengrok-0.5-org/opengrok.jar and opengrok-0.5/opengrok.jar differ
Binary files opengrok-0.5-org/source.war and opengrok-0.5/source.war differ
diff -upwrN opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java opengrok-0.5/src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
--- opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java	2007-08-15 03:33:58.000000000 -0400
+++ opengrok-0.5/src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java	2007-12-24 21:05:53.000000000 -0500
@@ -32,6 +32,7 @@ import org.opensolaris.opengrok.analysis
 import org.opensolaris.opengrok.analysis.document.TroffAnalyzer;
 import org.opensolaris.opengrok.analysis.java.JavaAnalyzer;
 import org.opensolaris.opengrok.analysis.lisp.LispAnalyzer;
+import org.opensolaris.opengrok.analysis.tcl.TclAnalyzer;
 import org.opensolaris.opengrok.analysis.plain.*;
 import org.opensolaris.opengrok.analysis.c.*;
 import org.opensolaris.opengrok.analysis.sh.*;
@@ -81,6 +82,7 @@ public class AnalyzerGuru {
         analyzers.add(GZIPAnalyzer.class);
         analyzers.add(JavaAnalyzer.class);
         analyzers.add(LispAnalyzer.class);
+        analyzers.add(TclAnalyzer.class);
     }
     
     private static HashMap<Class<? extends FileAnalyzer>, FileAnalyzer>
diff -upwrN opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/tcl/Consts.java opengrok-0.5/src/org/opensolaris/opengrok/analysis/tcl/Consts.java
--- opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/tcl/Consts.java	1969-12-31 19:00:00.000000000 -0500
+++ opengrok-0.5/src/org/opensolaris/opengrok/analysis/tcl/Consts.java	2007-12-24 21:05:53.000000000 -0500
@@ -0,0 +1,235 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+/*
+ * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ */
+
+package org.opensolaris.opengrok.analysis.tcl;
+
+import java.util.HashSet;
+
+/**
+  * Holds static hash set containing Tcl keywords
+  */
+public class Consts {
+    public static final HashSet<String> kwd = new HashSet<String>();
+    static {
+        // Tcl cmds
+        kwd.add("after");
+        kwd.add("append");
+        kwd.add("apply");
+        kwd.add("array");
+        kwd.add("auto_execok");
+        kwd.add("auto_import");
+        kwd.add("auto_load");
+        kwd.add("auto_mkindex");
+        kwd.add("auto_qualify");
+        kwd.add("auto_reset");
+        kwd.add("bgerror");
+        kwd.add("binary");
+        kwd.add("break");
+        kwd.add("catch");
+        kwd.add("cd");
+        kwd.add("chan");
+        kwd.add("clock");
+        kwd.add("close");
+        kwd.add("concat");
+        kwd.add("continue");
+        kwd.add("dde");
+        kwd.add("dict");
+        kwd.add("else");
+        kwd.add("elseif");
+        kwd.add("encoding");
+        kwd.add("eof");
+        kwd.add("error");
+        kwd.add("eval");
+        kwd.add("exec");
+        kwd.add("exit");
+        kwd.add("expr");
+        kwd.add("fblocked");
+        kwd.add("fconfigure");
+        kwd.add("fcopy");
+        kwd.add("file");
+        kwd.add("fileevent");
+        kwd.add("filename");
+        kwd.add("flush");
+        kwd.add("for");
+        kwd.add("foreach");
+        kwd.add("format");
+        kwd.add("gets");
+        kwd.add("glob");
+        kwd.add("global");
+        kwd.add("history");
+        kwd.add("http");
+        kwd.add("if");
+        kwd.add("incr");
+        kwd.add("info");
+        kwd.add("interp");
+        kwd.add("join");
+        kwd.add("lappend");
+        kwd.add("lassign");
+        kwd.add("lindex");
+        kwd.add("linsert");
+        kwd.add("list");
+        kwd.add("llength");
+        kwd.add("load");
+        kwd.add("lrange");
+        kwd.add("lrepeat");
+        kwd.add("lreplace");
+        kwd.add("lreverse");
+        kwd.add("lsearch");
+        kwd.add("lset");
+        kwd.add("lsort");
+        kwd.add("mathfunc");
+        kwd.add("mathop");
+        kwd.add("memory");
+        kwd.add("msgcat");
+        kwd.add("namespace");
+        kwd.add("open");
+        kwd.add("package");
+        kwd.add("parray");
+        kwd.add("pid");
+        kwd.add("pkg::create");
+        kwd.add("pkg_mkIndex");
+        kwd.add("platform");
+        kwd.add("platform::shell");
+        kwd.add("proc");
+        kwd.add("puts");
+        kwd.add("pwd");
+        kwd.add("read");
+        kwd.add("regexp");
+        kwd.add("registry");
+        kwd.add("regsub");
+        kwd.add("rename");
+        kwd.add("return");
+        kwd.add("scan");
+        kwd.add("seek");
+        kwd.add("set");
+        kwd.add("socket");
+        kwd.add("source");
+        kwd.add("split");
+        kwd.add("string");
+        kwd.add("subst");
+        kwd.add("switch");
+        kwd.add("tell");
+        kwd.add("then");
+        kwd.add("time");
+        kwd.add("tm");
+        kwd.add("trace");
+        kwd.add("unknown");
+        kwd.add("unload");
+        kwd.add("unset");
+        kwd.add("update");
+        kwd.add("uplevel");
+        kwd.add("upvar");
+        kwd.add("variable");
+        kwd.add("vwait");
+        kwd.add("while");
+        // Tk cmds
+        kwd.add("bell");
+        kwd.add("bind");
+        kwd.add("bindtags");
+        kwd.add("bitmap");
+        kwd.add("button");
+        kwd.add("canvas");
+        kwd.add("checkbutton");
+        kwd.add("clipboard");
+        kwd.add("colors");
+        kwd.add("console");
+        kwd.add("cursors");
+        kwd.add("destroy");
+        kwd.add("entry");
+        kwd.add("event");
+        kwd.add("focus");
+        kwd.add("font");
+        kwd.add("frame");
+        kwd.add("grab");
+        kwd.add("grid");
+        kwd.add("image");
+        kwd.add("keysyms");
+        kwd.add("label");
+        kwd.add("labelframe");
+        kwd.add("listbox");
+        kwd.add("loadTk");
+        kwd.add("lower");
+        kwd.add("menu");
+        kwd.add("menubutton");
+        kwd.add("message");
+        kwd.add("option");
+        kwd.add("options");
+        kwd.add("pack");
+        kwd.add("panedwindow");
+        kwd.add("photo");
+        kwd.add("place");
+        kwd.add("radiobutton");
+        kwd.add("raise");
+        kwd.add("scale");
+        kwd.add("scrollbar");
+        kwd.add("selection");
+        kwd.add("send");
+        kwd.add("spinbox");
+        kwd.add("text");
+        kwd.add("tk");
+        kwd.add("tk_bisque");
+        kwd.add("tk_chooseColor");
+        kwd.add("tk_chooseDirectory");
+        kwd.add("tk_dialog");
+        kwd.add("tk_focusFollowsMouse");
+        kwd.add("tk_focusNext");
+        kwd.add("tk_focusPrev");
+        kwd.add("tk_getOpenFile");
+        kwd.add("tk_getSaveFile");
+        kwd.add("tk_menuSetFocus");
+        kwd.add("tk_messageBox");
+        kwd.add("tk_optionMenu");
+        kwd.add("tk_popup");
+        kwd.add("tk_setPalette");
+        kwd.add("tk_textCopy");
+        kwd.add("tk_textCut");
+        kwd.add("tk_textPaste");
+        kwd.add("tkerror");
+        kwd.add("tkvars");
+        kwd.add("tkwait");
+        kwd.add("toplevel");
+        kwd.add("ttk_button");
+        kwd.add("ttk_checkbutton");
+        kwd.add("ttk_combobox");
+        kwd.add("ttk_entry");
+        kwd.add("ttk_frame");
+        kwd.add("ttk_image");
+        kwd.add("ttk_intro");
+        kwd.add("ttk_label");
+        kwd.add("ttk_labelframe");
+        kwd.add("ttk_menubutton");
+        kwd.add("ttk_notebook");
+        kwd.add("ttk_panedwindow");
+        kwd.add("ttk_progressbar");
+        kwd.add("ttk_radiobutton");
+        kwd.add("ttk_scrollbar");
+        kwd.add("ttk_separator");
+        kwd.add("ttk_sizegrip");
+        kwd.add("ttk_style");
+        kwd.add("ttk_treeview");
+        kwd.add("ttk_widget");
+        kwd.add("winfo");
+        kwd.add("wm");
+    }
+}
diff -upwrN opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzer.java opengrok-0.5/src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzer.java
--- opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzer.java	1969-12-31 19:00:00.000000000 -0500
+++ opengrok-0.5/src/org/opensolaris/opengrok/analysis/tcl/TclAnalyzer.java	2007-12-24 21:05:53.000000000 -0500
@@ -0,0 +1,96 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+/*
+ * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ */
+
+package org.opensolaris.opengrok.analysis.tcl;
+
+import org.apache.lucene.document.*;
+import org.apache.lucene.analysis.*;
+import java.io.*;
+import org.opensolaris.opengrok.analysis.*;
+import org.opensolaris.opengrok.analysis.plain.*;
+import org.opensolaris.opengrok.history.Annotation;
+
+public class TclAnalyzer extends PlainAnalyzer {
+
+    TclSymbolTokenizer cref;
+    TclXref xref;
+    Reader dummy = new StringReader("");
+
+    public static String[] suffixes = {
+        "TCL",
+        "TK",
+        "WISH",
+        "EXP",
+        "TCLX",
+        "ITCL",
+        "ITK",
+    };
+
+    public TclAnalyzer() {
+        super();
+        cref = new TclSymbolTokenizer(dummy);
+        xref = new TclXref(dummy);
+    }
+
+    public void analyze(Document doc, InputStream in) {
+        super.analyze(doc, in);
+        doc.add(new Field("refs", dummy));
+    }
+
+    public TokenStream tokenStream(String fieldName, Reader reader) {
+        if("refs".equals(fieldName)) {
+            cref.reInit(super.content, super.len);
+            return cref;
+        }
+        return super.tokenStream(fieldName, reader);
+    }
+
+    public static String[] getSuffixes() {
+        return suffixes;
+    }
+
+    /**
+     * Write a cross referenced HTML file.
+     * @param out Writer to write HTML cross-reference
+     */
+    public void writeXref(Writer out) throws IOException {
+        xref.reInit(content, len);
+        xref.setDefs(defs);
+        xref.write(out);
+        //lines = xref.getLine();
+    }
+
+    /**
+     * Write a cross referenced HTML file reads the source from in
+     * @param in Input source
+     * @param out Output xref writer
+     * @param annotation annotation for the file (could be null)
+     */
+    public static void writeXref(InputStream in, Writer out,
+                                 Annotation annotation) throws IOException {
+        TclXref xref = new TclXref(in);
+        xref.annotation = annotation;
+        xref.write(out);
+    }
+}
diff -upwrN opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/tcl/TclSymbolTokenizer.lex opengrok-0.5/src/org/opensolaris/opengrok/analysis/tcl/TclSymbolTokenizer.lex
--- opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/tcl/TclSymbolTokenizer.lex	1969-12-31 19:00:00.000000000 -0500
+++ opengrok-0.5/src/org/opensolaris/opengrok/analysis/tcl/TclSymbolTokenizer.lex	2007-12-24 21:05:53.000000000 -0500
@@ -0,0 +1,106 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+/*
+ * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ */
+
+/*
+ * Gets Tcl symbols - ignores comments, strings, keywords
+ */
+
+package org.opensolaris.opengrok.analysis.tcl;
+import java.util.*;
+import java.io.*;
+import org.apache.lucene.analysis.*;
+
+%%
+%public
+%class TclSymbolTokenizer
+%extends Tokenizer
+%unicode
+%function next
+%type Token
+
+%{
+
+  public void close() {
+  }
+
+  public void reInit(char[] buf, int len) {
+        yyreset((Reader) null);
+        zzBuffer = buf;
+        zzEndRead = len;
+        zzAtEOF = true;
+        zzStartRead = 0;
+  }
+
+  public static void main(String argv[]) {
+    if (argv.length == 0) {
+      System.out.println("Usage : java TclSymbolTokenizer <inputfiles>");
+    }
+    else {
+      Date start = new Date();
+      for (String arg: argv) {
+        TclSymbolTokenizer scanner = null;
+        try {
+          scanner = new TclSymbolTokenizer(new BufferedReader(new FileReader(arg)));
+          Token t;
+          while ((t = scanner.next()) != null) {
+                System.out.println(t.termText() + " ["+t.startOffset()+"-"+ t.endOffset()+"]");
+          }
+        }
+        catch (Exception e) {
+          e.printStackTrace();
+        }
+        long span =  ((new Date()).getTime() - start.getTime());
+        System.err.println("took: "+ span + " msec");
+      }
+    }
+  }
+
+%}
+Identifier = [\:\=a-zA-Z0-9_]+
+
+%state STRING COMMENT SCOMMENT
+
+%%
+
+<YYINITIAL> {
+{Identifier} {String id = yytext();
+              if (!Consts.kwd.contains(id))
+                return new Token(yytext(), zzStartRead, zzMarkedPos);}
+ \"     { yybegin(STRING); }
+"#"     { yybegin(SCOMMENT); }
+}
+
+<STRING> {
+ \"     { yybegin(YYINITIAL); }
+\\\\ | \\\"     {}
+}
+
+<SCOMMENT> {
+\n      { yybegin(YYINITIAL);}
+}
+
+<YYINITIAL, STRING, COMMENT, SCOMMENT> {
+<<EOF>>   { return null;}
+.|\n    {}
+}
diff -upwrN opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/tcl/TclXref.lex opengrok-0.5/src/org/opensolaris/opengrok/analysis/tcl/TclXref.lex
--- opengrok-0.5-org/src/org/opensolaris/opengrok/analysis/tcl/TclXref.lex	1969-12-31 19:00:00.000000000 -0500
+++ opengrok-0.5/src/org/opensolaris/opengrok/analysis/tcl/TclXref.lex	2007-12-24 21:05:53.000000000 -0500
@@ -0,0 +1,210 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+/*
+ * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ */
+
+/*
+ * Cross reference a Tcl file
+ */
+
+package org.opensolaris.opengrok.analysis.tcl;
+import java.util.*;
+import java.io.*;
+import org.opensolaris.opengrok.web.Util;
+import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
+import org.opensolaris.opengrok.history.Annotation;
+
+%%
+%public
+%class TclXref
+%unicode
+%ignorecase
+%int
+%line
+%{
+  Writer out;
+  String urlPrefix = RuntimeEnvironment.getInstance().getUrlPrefix();
+  Annotation annotation;
+  private HashMap<String, HashMap<Integer, String>> defs = null;
+  public void setDefs(HashMap<String, HashMap<Integer, String>> defs) {
+        this.defs = defs;
+  }
+
+  public void reInit(char[] buf, int len) {
+        yyreset((Reader) null);
+        zzBuffer = buf;
+        zzEndRead = len;
+        zzAtEOF = true;
+        zzStartRead = 0;
+        annotation = null;
+  }
+
+  public void write(Writer out) throws IOException {
+        this.out = out;
+        Util.readableLine(1, out, annotation);
+        yyline = 2;
+        while(yylex() != YYEOF) {
+        }
+  }
+
+  public int getLine() {
+        return yyline-2;
+  }
+
+  public static void main(String argv[]) {
+    if (argv.length <= 1) {
+      System.out.println("Usage : java TclXref <inputfile> <outfile> <ctags binary> ");
+    }
+    else {
+      Date start = new Date();
+      TclXref scanner = null;
+      try {
+          //Ctags ctags = new Ctags(argv[2]);
+          scanner = new TclXref( new BufferedReader(new FileReader(argv[0])));
+          //scanner.setDefs(ctags.doCtags(argv[0] + "\n"));
+          BufferedWriter out = new BufferedWriter(new FileWriter(argv[1]));
+          out.write("<html><head><style>a{text-decoration:none;color:#444499;} .I{color:#000099;} .K{color:#000000; font-weight:bold;} .N{color:brown;} .c{color:grey;} .s{color:green;} .hl{color: black; font-weight:bold; text-decoration:none; background-color:#eee; margin-right:.2em;padding-left:.2em;padding-right:.5em;} .l{color: #666699; text-decoration:none; font-weight:normal;background-color:#eee; margin-right:.2em;padding-left:.2em;padding-right:.5em;} .d{color:#909; font-weight:bold; font-style:italic;} .f{color:#909;} .mf{color:#909;}</style></head><body><pre>");
+          scanner.write(out);
+          out.write("</pre></body></html>");
+          out.close();
+      }
+      catch (Exception e) {
+        e.printStackTrace();
+      }
+      long span =  ((new Date()).getTime() - start.getTime());
+      System.err.println("took: "+ span + " msec");
+     }
+  }
+
+%}
+
+WhiteSpace     = [ \t\f\r]+
+Identifier = [\:\=a-zA-Z0-9_]+
+
+URIChar = [\?\+\%\&\:\/\.\@\_\;\=\$\,\-\!\~\*\\]
+FNameChar = [a-zA-Z0-9_\-\.]
+File = [a-zA-Z] {FNameChar}+ "." ([a-zA-Z]+)
+Path = "/"? [a-zA-Z]{FNameChar}* ("/" [a-zA-Z]{FNameChar}*[a-zA-Z0-9])+
+
+Number = ([0-9][0-9]*|[0-9]+.[0-9]+|"#" [boxBOX] [0-9a-fA-F]+)
+
+%state  STRING COMMENT SCOMMENT
+
+%%
+<YYINITIAL>{
+ {Identifier}   { String id = yytext();
+                  if (Consts.kwd.contains(id)) {
+                    out.write("<b>");out.write(id);out.write("</b>");
+                    //out.write("<b><i>");out.write(id);out.write("</i></b>");
+                  } else {
+                    HashMap<Integer, String> tags;
+                    if(defs != null && (tags = defs.get(id)) != null) {
+                      int sz = 0;
+                      boolean written = false;
+                      if (tags.containsKey(new Integer(yyline-1))) {
+                        out.write("<a class=\"d\" name=\"");
+                        out.write(id);
+                        out.write("\">");
+                        out.write(id);
+                        out.write("</a>");
+                        written = true;
+                        break;
+                      } else if (tags.size() == 1) {
+                        out.write("<a class=\"f\" href=\"#");
+                        out.write(id);
+                        out.write("\">");
+                        out.write(id);
+                        out.write("</a>");
+                      } else {
+                        out.write("<span class=\"mf\">");
+                        out.write(id);
+                        out.write("</span>");
+                      }
+                    } else {
+                      out.write("<a href=\"");
+                      out.write(urlPrefix);
+                      out.write("defs=");
+                      out.write(id);
+                      out.write("\">");
+                      out.write(id);
+                      out.write("</a>");
+                    }
+                  }
+                }
+
+{Number}        { out.write("<span class=\"n\">");
+                  out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
+                  out.write("</span>"); }
+
+ \"     { yybegin(STRING);out.write("<span class=\"s\">\"");}
+ "#"    { yybegin(SCOMMENT);out.write("<span class=\"c\">#");}
+}
+
+<STRING> {
+ \" {WhiteSpace} \"  { out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);}
+ \"     { yybegin(YYINITIAL); out.write("\"</span>"); }
+ \\\\   { out.write("\\\\"); }
+ \\\"   { out.write("\\\""); }
+}
+
+<SCOMMENT> {
+\n { yybegin(YYINITIAL); out.write("</span>");
+     Util.readableLine(yyline, out, annotation);}
+}
+
+<YYINITIAL, STRING, COMMENT, SCOMMENT> {
+"&"     {out.write( "&amp;");}
+"<"     {out.write( "&lt;");}
+">"     {out.write( "&gt;");}
+{WhiteSpace}*\n { Util.readableLine(yyline, out, annotation); }
+ {WhiteSpace}   { out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead); }
+ [!-~]  { out.write(yycharat(0)); }
+ .      { }
+}
+
+<STRING, COMMENT, SCOMMENT> {
+{Path}
+        { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));}
+
+{File}
+        {
+        out.write("<a href=\""+urlPrefix+"path=");
+        out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
+        out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");}
+
+("http" | "https" | "ftp" ) "://" ({FNameChar}|{URIChar})+[a-zA-Z0-9/]
+        {
+         out.write("<a href=\"");
+         out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
+         out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");}
+
+{FNameChar}+ "@" {FNameChar}+ "." {FNameChar}+
+        {
+          for(int mi = zzStartRead; mi < zzMarkedPos; mi++) {
+            if(zzBuffer[mi] != '@') {
+              out.write(zzBuffer[mi]);
+            } else {
+              out.write(" (at) ");
+            }
+          }
+        }
+}
