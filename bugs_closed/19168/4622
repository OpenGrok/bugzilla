# HG changeset patch
# User jel+opengrok@cs.uni-magdeburg.de
# Date 1328985738 -3600
# Node ID 79f80635064e752a96d1cde2d3c2da95532bf85f
# Parent  82579830a2a26fc3d703b0ab4fa39876a5d90305
avoid unecessary I/O - cache contents of timestamp/{header,footer}_include until reconfiguration occures

diff -r 82579830a2a2 -r 79f80635064e src/org/opensolaris/opengrok/configuration/Configuration.java
--- a/src/org/opensolaris/opengrok/configuration/Configuration.java	Sat Feb 11 04:46:42 2012 +0100
+++ b/src/org/opensolaris/opengrok/configuration/Configuration.java	Sat Feb 11 19:42:18 2012 +0100
@@ -505,63 +505,90 @@
         this.indexVersionedFilesOnly = indexVersionedFilesOnly;
     }
 
+    private transient Date lastModified;
+    /**
+     * Get the date of the last index update.
+     * @return the time of the last index update.
+     */
     public Date getDateForLastIndexRun() {
-        File timestamp = new File(getDataRoot(), "timestamp");
-        return new Date(timestamp.lastModified());
+    	if (lastModified == null) {
+    		File timestamp = new File(getDataRoot(), "timestamp");
+        	lastModified = new Date(timestamp.lastModified());
+    	}
+    	return lastModified;
     }
 
     /**
-     * Return contents of a file or empty string if the file cannot be read.
+     * Get the contents of a file or empty string if the file cannot be read.
      */
-    private String getFileContent(File file) {
-        StringBuilder contents = new StringBuilder();
-
+    private static String getFileContent(File file) {
+        if (file == null || ! file.canRead()) {
+        	return "";
+        }
+        FileReader fin = null;
+        BufferedReader input = null;
         try {
-            BufferedReader input = new BufferedReader(new FileReader(file));
-            try {
-                String line = null;
-                while (( line = input.readLine()) != null) {
-                    contents.append(line);
-                    contents.append(System.getProperty("line.separator"));
-                }
+        	fin = new FileReader(file);
+            input = new BufferedReader(fin);
+            String line = null;
+            StringBuilder contents = new StringBuilder();
+            String EOL = System.getProperty("line.separator");
+            while (( line = input.readLine()) != null) {
+                contents.append(line).append(EOL);
             }
-            catch (java.io.IOException e) {
-                logger.warning("failed to read header include file: " + e);
-                return "";
-            }
-            finally {
-                try {
-                    input.close();
-                }
-                catch (java.io.IOException e) {
-                    logger.info("failed to close header include file: " + e);
-                }
-            }
+            return contents.toString();
+        } catch (java.io.FileNotFoundException e) {
+            /* should usually not happen */
+        } catch (java.io.IOException e) {
+            logger.warning("failed to read header include file: " + e.getMessage());
+        } finally {
+        	if (input != null) {
+	            try { input.close(); } 
+	            catch (Exception e) { /* nothing we can do about it */ }
+        	} else if (fin != null) {
+	            try { fin.close(); } 
+	            catch (Exception e) { /* nothing we can do about it */ }
+        	}
         }
-        catch (java.io.FileNotFoundException e) {
-            return "";
-        }
-        return contents.toString();
+        return "";
     }
 
     /**
-     * Return string from the header include file so it can be embedded into
-     * page footer.
+     * The name of the file relative to the <var>DATA_ROOT</var>, which should 
+     * be included into the footer of generated web pages.
+     */
+    public static final String FOOTER_INCLUDE_FILE = "footer_include";
+    
+    private transient String footer = null;
+    /**
+     * Get the contents of the footer include file.
+     * @return an empty string if it could not be read successfully, the 
+     * 	contents of the file otherwise.
      */
     public String getFooterIncludeFileContent() {
-        File hdrfile = new File(getDataRoot(), "footer_include");
-        
-        return getFileContent(hdrfile);
+    	if (footer == null) {
+    		footer = getFileContent(new File(getDataRoot(), FOOTER_INCLUDE_FILE));
+    	}
+    	return footer;
     }
 
     /**
-     * Return string from the header include file so it can be embedded into
-     * page header.
+     * The name of the file relative to the <var>DATA_ROOT</var>, which should 
+     * be included into the footer of generated web pages.
+     */
+    public static final String HEADER_INCLUDE_FILE = "header_include";
+    
+    private transient String header = null;
+    /**
+     * Get the contents of the footer include file.
+     * @return an empty string if it could not be read successfully, the 
+     * 	contents of the file otherwise.
      */
     public String getHeaderIncludeFileContent() {
-        File hdrfile = new File(getDataRoot(), "header_include");
-
-        return getFileContent(hdrfile);
+    	if (header == null) {
+    		header = getFileContent(new File(getDataRoot(), HEADER_INCLUDE_FILE));
+    	}
+    	return header;
     }
 
     public String getDatabaseDriver() {
