diff -r 100d800f80a8 -r d1ae63085109 build.xml
--- a/build.xml	Thu Dec 16 01:27:29 2010 +0100
+++ b/build.xml	Thu Dec 16 15:07:15 2010 +0100
@@ -157,6 +157,8 @@
         <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/python/PythonXref.lex" destdir="${src.generatedsrc.dir}"/>
         <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/perl/PerlSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
         <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/perl/PerlXref.lex" destdir="${src.generatedsrc.dir}"/>
+	<jflex file="${src.dir}/org/opensolaris/opengrok/analysis/php/PhpSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
+	<jflex file="${src.dir}/org/opensolaris/opengrok/analysis/php/PhpXref.lex" destdir="${src.generatedsrc.dir}"/>
         <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/lisp/LispSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
         <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/lisp/LispXref.lex" destdir="${src.generatedsrc.dir}"/>
         <jflex file="${src.dir}/org/opensolaris/opengrok/analysis/tcl/TclSymbolTokenizer.lex" destdir="${src.generatedsrc.dir}"/>
diff -r 100d800f80a8 -r d1ae63085109 src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java
--- a/src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java	Thu Dec 16 01:27:29 2010 +0100
+++ b/src/org/opensolaris/opengrok/analysis/AnalyzerGuru.java	Thu Dec 16 15:07:15 2010 +0100
@@ -56,6 +56,7 @@
 import org.opensolaris.opengrok.analysis.java.JavaAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.lisp.LispAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.perl.PerlAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.php.PhpAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.PlainAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.plain.XMLAnalyzerFactory;
 import org.opensolaris.opengrok.analysis.python.PythonAnalyzerFactory;
@@ -131,6 +132,7 @@
             new JavaAnalyzerFactory(),
             new PythonAnalyzerFactory(),
             new PerlAnalyzerFactory(),
+            new PhpAnalyzerFactory(),
             new LispAnalyzerFactory(),
             new TclAnalyzerFactory(),
             new SQLAnalyzerFactory(),
diff -r 100d800f80a8 -r d1ae63085109 src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java
--- a/src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java	Thu Dec 16 01:27:29 2010 +0100
+++ b/src/org/opensolaris/opengrok/analysis/c/CAnalyzerFactory.java	Thu Dec 16 15:07:15 2010 +0100
@@ -46,7 +46,6 @@
         "S",
         "XS",                   // Mainly found in perl directories
         "X",                    // rpcgen input files
-        "PHP",
         "CS",                   // C#
     };
 
diff -r 100d800f80a8 -r d1ae63085109 src/org/opensolaris/opengrok/analysis/php/Consts.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/opensolaris/opengrok/analysis/php/Consts.java	Thu Dec 16 15:07:15 2010 +0100
@@ -0,0 +1,107 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+package org.opensolaris.opengrok.analysis.php;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+  * Holds static hash set containing the Perl keywords
+  */
+public class Consts{
+    public static final Set<String> kwd = new HashSet<String>() ;
+    static {
+        //Keywords
+        kwd.add("abstract"); //As of PHP5
+        kwd.add("and");
+        kwd.add("array");
+        kwd.add("as");
+        kwd.add("break");
+        kwd.add("case");
+        kwd.add("catch"); //As of PHP5
+        kwd.add("cfunction"); // PHP4 Only
+        kwd.add("class");
+        kwd.add("clone"); //As of PHP5
+        kwd.add("const");
+        kwd.add("continue");
+        kwd.add("declare");
+        kwd.add("default");
+        kwd.add("do");
+        kwd.add("else");
+        kwd.add("elseif");
+        kwd.add("enddeclare");
+        kwd.add("endfor");
+        kwd.add("endforeach");
+        kwd.add("endif");
+        kwd.add("endswitch");
+        kwd.add("endwhile");
+        kwd.add("extends");
+        kwd.add("final"); //As of PHP5
+        kwd.add("for");
+        kwd.add("foreach");
+        kwd.add("function");
+        kwd.add("global");
+        kwd.add("goto"); //As of PHP5.3
+        kwd.add("if");
+        kwd.add("implements"); //As of PHP5
+        kwd.add("interface"); //As of PHP5
+        kwd.add("interfaceof"); //As of PHP5
+        kwd.add("namespace"); //As of PHP5
+        kwd.add("new");
+        kwd.add("old_function"); //PHP4 Only
+        kwd.add("or");
+        kwd.add("private"); //As of PHP5
+        kwd.add("protected"); //As of PHP5
+        kwd.add("public"); //As of PHP5
+        kwd.add("static");
+        kwd.add("switch");
+        kwd.add("throw"); //As of PHP5
+        kwd.add("try"); //As of PHP5
+        kwd.add("use");
+        kwd.add("var");
+        kwd.add("while");
+        kwd.add("xor");
+
+        //Constants
+        kwd.add("__CLASS__");
+        kwd.add("__DIR__"); //As of PHP5.3
+        kwd.add("__FILE__");
+        kwd.add("__FUNCTION__");
+        kwd.add("__LINE__");
+        kwd.add("__METHOD__");
+        kwd.add("__NAMESPACE__");
+
+        //Constructs
+        kwd.add("die");
+        kwd.add("echo");
+        kwd.add("empty");
+        kwd.add("exit");
+        kwd.add("eval");
+        kwd.add("include");
+        kwd.add("include_once");
+        kwd.add("isset");
+        kwd.add("list");
+        kwd.add("require");
+        kwd.add("require_once");
+        kwd.add("return");
+        kwd.add("print");
+        kwd.add("unset");
+    }
+}
diff -r 100d800f80a8 -r d1ae63085109 src/org/opensolaris/opengrok/analysis/php/PhpAnalyzer.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/opensolaris/opengrok/analysis/php/PhpAnalyzer.java	Thu Dec 16 15:07:15 2010 +0100
@@ -0,0 +1,90 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+package org.opensolaris.opengrok.analysis.php;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.io.StringReader;
+import java.io.Writer;
+
+import org.apache.lucene.analysis.TokenStream;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
+import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.analysis.plain.PlainAnalyzer;
+import org.opensolaris.opengrok.configuration.Project;
+import org.opensolaris.opengrok.history.Annotation;
+
+public class PhpAnalyzer extends PlainAnalyzer {
+
+    PhpSymbolTokenizer cref;
+    PhpXref xref;
+    Reader dummy = new StringReader("");
+
+    /** Creates a new instance of PhpAnalyzer */
+    protected PhpAnalyzer(FileAnalyzerFactory factory) {
+        super(factory);
+        cref = new PhpSymbolTokenizer(dummy);
+        xref = new PhpXref(dummy);
+    }
+
+    @Override
+    public void analyze(Document doc, Reader in) throws IOException {
+        super.analyze(doc, in);
+        doc.add(new Field("refs", dummy));
+    }
+
+    @Override
+    public TokenStream tokenStream(String fieldName, Reader reader) {
+        if("refs".equals(fieldName)) {
+            cref.reInit(super.content, super.len);
+            return cref;
+        }
+        return super.tokenStream(fieldName, reader);
+    }
+
+    /**
+     * Write a cross referenced HTML file.
+     * @param out Writer to write HTML cross-reference
+     */
+    @Override
+    public void writeXref(Writer out) throws IOException {
+        xref.reInit(content, len);
+        xref.setDefs(defs);
+        xref.project = project;
+        xref.write(out);
+    }
+
+    /**
+     * Write a cross referenced HTML file reads the source from in
+     * @param in Input source
+     * @param out Output xref writer
+     * @param defs definitions for the file (could be null)
+     * @param annotation annotation for the file (could be null)
+     */
+    static void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project) throws IOException {
+        PhpXref xref = new PhpXref(in);
+        xref.annotation = annotation;
+        xref.project = project;
+        xref.setDefs(defs);
+        xref.write(out);
+    }
+}
diff -r 100d800f80a8 -r d1ae63085109 src/org/opensolaris/opengrok/analysis/php/PhpAnalyzerFactory.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/opensolaris/opengrok/analysis/php/PhpAnalyzerFactory.java	Thu Dec 16 15:07:15 2010 +0100
@@ -0,0 +1,61 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+package org.opensolaris.opengrok.analysis.php;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.io.Writer;
+import org.opensolaris.opengrok.analysis.Definitions;
+import org.opensolaris.opengrok.analysis.FileAnalyzer;
+import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
+import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
+import org.opensolaris.opengrok.configuration.Project;
+import org.opensolaris.opengrok.history.Annotation;
+
+public class PhpAnalyzerFactory extends FileAnalyzerFactory {
+
+    private static final String[] SUFFIXES = {
+        "PHP",
+        "PHP3",
+        "PHP4",
+        "PHPS",
+        "PHTML"
+    };
+    private static final String[] MAGICS = {
+        "#!/usr/bin/env php",
+        "#!/usr/bin/php",
+        "#!/bin/php"
+    };
+
+    public PhpAnalyzerFactory() {
+        super(null, SUFFIXES, MAGICS, null, "text/plain", Genre.PLAIN);
+    }
+
+    @Override
+    protected FileAnalyzer newAnalyzer() {
+        return new PhpAnalyzer(this);
+    }
+
+    @Override
+    public void writeXref(Reader in, Writer out, Definitions defs, Annotation annotation, Project project)
+        throws IOException {
+        PhpAnalyzer.writeXref(in, out, defs, annotation, project);
+    }
+}
diff -r 100d800f80a8 -r d1ae63085109 src/org/opensolaris/opengrok/analysis/php/PhpSymbolTokenizer.lex
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/opensolaris/opengrok/analysis/php/PhpSymbolTokenizer.lex	Thu Dec 16 15:07:15 2010 +0100
@@ -0,0 +1,76 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+/*
+ * Gets Php symbols - ignores comments, strings, keywords
+ */
+
+package org.opensolaris.opengrok.analysis.php;
+import java.io.IOException;
+import java.io.Reader;
+import org.opensolaris.opengrok.analysis.JFlexTokenizer;
+
+%%
+%public
+%class PhpSymbolTokenizer
+%extends JFlexTokenizer
+%unicode
+%type boolean
+%eofval{
+return false;
+%eofval}
+%char
+
+Identifier = [a-zA-Z_] [a-zA-Z0-9_]*
+
+%state STRING SCOMMENT QSTRING
+
+%%
+
+<YYINITIAL> {
+{Identifier} {String id = yytext();
+                if(!Consts.kwd.contains(id)){
+                        setAttribs(id, yychar, yychar + yylength());
+                        return true; }
+              }
+ \"     { yybegin(STRING); }
+ \'     { yybegin(QSTRING); }
+ "#"   { yybegin(SCOMMENT); }
+ }
+
+<STRING> {
+ \"     { yybegin(YYINITIAL); }
+ \\\"    {}
+ \n     { yybegin(YYINITIAL); }
+}
+
+<QSTRING> {
+ \'     { yybegin(YYINITIAL); }
+ \\\'   {}
+ \n     { yybegin(YYINITIAL); }
+}
+
+<SCOMMENT> {
+ \n    { yybegin(YYINITIAL);}
+}
+
+<YYINITIAL, STRING, SCOMMENT, QSTRING> {
+<<EOF>>   { return false;}
+.|\n    {}
+}
diff -r 100d800f80a8 -r d1ae63085109 src/org/opensolaris/opengrok/analysis/php/PhpXref.lex
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/opensolaris/opengrok/analysis/php/PhpXref.lex	Thu Dec 16 15:07:15 2010 +0100
@@ -0,0 +1,170 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+/*
+ * Cross reference a Php file
+ */
+
+package org.opensolaris.opengrok.analysis.php;
+import org.opensolaris.opengrok.analysis.JFlexXref;
+import java.io.IOException;
+import java.io.Writer;
+import java.io.Reader;
+import org.opensolaris.opengrok.web.Util;
+
+%%
+%public
+%class PhpXref
+%extends JFlexXref
+%unicode
+%ignorecase
+%int
+%{
+  // TODO move this into an include file when bug #16053 is fixed
+  @Override
+  protected int getLineNumber() { return yyline; }
+  @Override
+  protected void setLineNumber(int x) { yyline = x; }
+%}
+
+WhiteSpace     = [ \t\f]+
+EOL = \r|\n|\r\n
+Identifier = [a-zA-Z_] [a-zA-Z0-9_]+
+
+URIChar = [\?\+\%\&\:\/\.\@\_\;\=\$\,\-\!\~\*\\]
+FNameChar = [a-zA-Z0-9_\-\.]
+File = [a-zA-Z]{FNameChar}* "." ("php"|"php3"|"php4"|"phps"|"phtml"|"inc"|"diff"|"patch")
+Path = "/"? [a-zA-Z]{FNameChar}* ("/" [a-zA-Z]{FNameChar}*[a-zA-Z0-9])+
+
+Number = (0[xX][0-9a-fA-F]+|[0-9]+\.[0-9]+|[0-9][0-9_]*)([eE][+-]?[0-9]+)?
+
+Pods = "=back" | "=begin" | "=end" | "=for" | "=head1" | "=head2" | "=item" | "=over" | "=pod"
+PodEND = "=cut"
+
+%state  STRING SCOMMENT QSTRING POD
+
+%%
+<YYINITIAL>{
+
+{Identifier} {
+    String id = yytext();
+    writeSymbol(id, Consts.kwd, yyline);
+}
+
+("$"|"@"|"%"|"&") {Identifier} {
+  //we ignore keywords if the identifier starts with one of variable chars ...
+    String id = yytext().substring(1);
+    out.write(yytext().substring(0,1));
+    writeSymbol(id, null, yyline);
+}
+
+"<" ({File}|{Path}) ">" {
+        out.write("&lt;");
+        String path = yytext();
+        path = path.substring(1, path.length() - 1);
+        out.write("<a href=\""+urlPrefix+"path=");
+        out.write(path);
+        appendProject();
+        out.write("\">");
+        out.write(path);
+        out.write("</a>");
+        out.write("&gt;");
+}
+
+{Number}        { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>"); }
+
+ \"     { yybegin(STRING);out.write("<span class=\"s\">\"");}
+ \'     { yybegin(QSTRING);out.write("<span class=\"s\">\'");}
+ "#"   { yybegin(SCOMMENT);out.write("<span class=\"c\">#");}
+^ {Pods}   { yybegin(POD);out.write("<span class=\"c\">"+yytext());}
+}
+
+<POD> {
+^ {PodEND} .* / {EOL} {
+    yybegin(YYINITIAL); out.write(yytext()+"</span>");
+    // without eol lookahead one could perhaps just use below and use yytext().trim() above ?
+    //startNewLine();
+  }
+}
+
+<STRING> {
+  \"     { yybegin(YYINITIAL); out.write("\"</span>"); }
+ \\\\   { out.write("\\\\"); }
+ \\\"   { out.write("\\\""); }
+ {WhiteSpace}*{EOL} {
+    yybegin(YYINITIAL); out.write("</span>");
+    startNewLine();
+  }
+}
+
+<QSTRING> {
+ "\\\\" { out.write("\\\\"); }
+ "\\\'" { out.write("\\\'"); }
+ \' {WhiteSpace} \' { out.write(yytext()); }
+ \'     { yybegin(YYINITIAL); out.write("'</span>"); }
+ {WhiteSpace}*{EOL} {
+    yybegin(YYINITIAL); out.write("</span>");
+    startNewLine();
+  }
+}
+
+<SCOMMENT> {
+  {WhiteSpace}*{EOL} {
+    yybegin(YYINITIAL); out.write("</span>");
+    startNewLine();
+  }
+}
+
+
+<YYINITIAL, STRING, SCOMMENT, QSTRING, POD> {
+"&"     {out.write( "&amp;");}
+"<"     {out.write( "&lt;");}
+">"     {out.write( "&gt;");}
+{WhiteSpace}*{EOL}      { startNewLine(); }
+ {WhiteSpace}   { out.write(yytext()); }
+ [!-~]  { out.write(yycharat(0)); }
+ .      { writeUnicodeChar(yycharat(0)); }
+}
+
+<STRING, SCOMMENT, STRING, QSTRING, POD> {
+{Path}
+        { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));}
+
+{File}
+        {
+        String path = yytext();
+        out.write("<a href=\""+urlPrefix+"path=");
+        out.write(path);
+        appendProject();
+        out.write("\">");
+        out.write(path);
+        out.write("</a>");}
+
+("http" | "https" | "ftp" ) "://" ({FNameChar}|{URIChar})+[a-zA-Z0-9/]
+        {
+         String url = yytext();
+         out.write("<a href=\"");
+         out.write(url);out.write("\">");
+         out.write(url);out.write("</a>");}
+
+{FNameChar}+ "@" {FNameChar}+ "." {FNameChar}+
+        {
+          writeEMailAddress(yytext());
+        }
+}
