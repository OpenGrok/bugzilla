# HG changeset patch
# User jel+opengrok@cs.uni-magdeburg.de
# Date 1309098377 -7200
# Node ID 3d56f3369ec7ed60b99e96bea4c621afccbf8da6
# Parent  6d68997da907c13d0e8f099952ac08331beacced
Throwables should be logged as well

diff -r 6d68997da907 -r 3d56f3369ec7 src/org/opensolaris/opengrok/index/IndexDatabase.java
--- a/src/org/opensolaris/opengrok/index/IndexDatabase.java	Sun Jun 26 05:17:08 2011 +0200
+++ b/src/org/opensolaris/opengrok/index/IndexDatabase.java	Sun Jun 26 16:26:17 2011 +0200
@@ -63,6 +63,7 @@
 import org.opensolaris.opengrok.history.HistoryException;
 import org.opensolaris.opengrok.history.HistoryGuru;
 import org.opensolaris.opengrok.search.QueryBuilder;
+import org.opensolaris.opengrok.util.Executor;
 import org.opensolaris.opengrok.web.Util;
 
 /**
@@ -90,7 +91,7 @@
     private boolean dirty;
     private boolean running;
     private List<String> directories;
-    private static final Logger log = Logger.getLogger(IndexDatabase.class.getName());
+    static final Logger log = Logger.getLogger(IndexDatabase.class.getName());
     private Ctags ctags;
     private LockFactory lockfact;
 
@@ -155,8 +156,8 @@
                 public void run() {
                     try {
                         db.update();
-                    } catch (Exception e) {
-                        log.log(Level.FINE,"Problem updating lucene index database: ",e);
+                    } catch (Throwable e) {
+                        log.log(Level.SEVERE,"Problem updating lucene index database: ",e);
                     }
                 }
             });
@@ -214,8 +215,8 @@
                     public void run() {
                         try {
                             db.update();
-                        } catch (Exception e) {
-                            log.log(Level.WARNING, "An error occured while updating index", e);
+                        } catch (Throwable e) {
+                            log.log(Level.SEVERE, "An error occured while updating index", e);
                         }
                     }
                 });
@@ -426,8 +427,8 @@
                     public void run() {
                         try {
                             db.update();
-                        } catch (Exception e) {
-                            log.log(Level.FINE,"Problem updating lucene index database: ",e);
+                        } catch (Throwable e) {
+                            log.log(Level.SEVERE,"Problem updating lucene index database: ",e);
                         }
                     }
                 });
diff -r 6d68997da907 -r 3d56f3369ec7 src/org/opensolaris/opengrok/index/Indexer.java
--- a/src/org/opensolaris/opengrok/index/Indexer.java	Sun Jun 26 05:17:08 2011 +0200
+++ b/src/org/opensolaris/opengrok/index/Indexer.java	Sun Jun 26 16:26:17 2011 +0200
@@ -42,6 +42,7 @@
 import java.util.logging.Level;
 import java.util.logging.LogManager;
 import java.util.logging.Logger;
+
 import org.opensolaris.opengrok.Info;
 import org.opensolaris.opengrok.OpenGrokLogger;
 import org.opensolaris.opengrok.analysis.AnalyzerGuru;
@@ -53,6 +54,7 @@
 import org.opensolaris.opengrok.history.Repository;
 import org.opensolaris.opengrok.history.RepositoryFactory;
 import org.opensolaris.opengrok.history.RepositoryInfo;
+import org.opensolaris.opengrok.util.Executor;
 import org.opensolaris.opengrok.util.Getopt;
 
 /**
@@ -66,7 +68,7 @@
     private static final String ON = "on";
     private static final String OFF = "off";
     private static Indexer index = new Indexer();
-    private static final Logger log = Logger.getLogger(Indexer.class.getName());
+    static final Logger log = Logger.getLogger(Indexer.class.getName());
 
     private static final String DERBY_EMBEDDED_DRIVER =
             "org.apache.derby.jdbc.EmbeddedDriver";
@@ -94,6 +96,7 @@
             System.err.println(cmdOptions.getUsage());
             System.exit(1);
         } else {
+            Executor.registerErrorHandler();
             boolean searchRepositories = false;
             ArrayList<String> subFiles = new ArrayList<String>();
             ArrayList<String> repositories = new ArrayList<String>();
@@ -502,12 +505,12 @@
                 }
                 getInstance().sendToConfigHost(env, configHost);
             } catch (IndexerException ex) {
-                OpenGrokLogger.getLogger().log(Level.SEVERE, "Exception running indexer", ex);
+                log.log(Level.SEVERE, "Exception running indexer", ex);
                 System.err.println(cmdOptions.getUsage());
                 System.exit(1);
-            } catch (IOException ioe) {
-                System.err.println("Got IOException " + ioe);
-                OpenGrokLogger.getLogger().log(Level.SEVERE, "Exception running indexer", ioe);
+            } catch (Throwable e) {
+                System.err.println("Exception: " + e.getLocalizedMessage());
+                log.log(Level.SEVERE, "Unexpected Exception", e);
                 System.exit(1);
             }
         }
@@ -738,13 +741,10 @@
                             } else if (optimize) {
                                 db.optimize();
                             }
-                        } catch (Exception e) {
-                            if (update) {
-                                OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while updating index", e);
-                            } else {
-                                OpenGrokLogger.getLogger().log(Level.WARNING, "An error occured while optimizing index", e);
-                            }
-                            log.log(Level.SEVERE,"Stack trace: ",e.fillInStackTrace());
+                        } catch (Throwable e) {
+                            log.log(Level.SEVERE, "An error occured while "
+                                + (update ? "updating" : "optimizing")
+                                + " index", e);
                         }
                     }
                 });
@@ -757,7 +757,7 @@
                 // Wait forever
                 executor.awaitTermination(999,TimeUnit.DAYS);
             } catch (InterruptedException exp) {
-                OpenGrokLogger.getLogger().log(Level.WARNING, "Received interrupt while waiting for executor to finish", exp);
+                log.log(Level.WARNING, "Received interrupt while waiting for executor to finish", exp);
             }
        }
     }
diff -r 6d68997da907 -r 3d56f3369ec7 src/org/opensolaris/opengrok/util/Executor.java
--- a/src/org/opensolaris/opengrok/util/Executor.java	Sun Jun 26 05:17:08 2011 +0200
+++ b/src/org/opensolaris/opengrok/util/Executor.java	Sun Jun 26 16:26:17 2011 +0200
@@ -30,9 +30,12 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
+import java.lang.Thread.UncaughtExceptionHandler;
 import java.util.Arrays;
 import java.util.List;
 import java.util.logging.Level;
+import java.util.logging.Logger;
+
 import org.opensolaris.opengrok.OpenGrokLogger;
 
 /**
@@ -42,6 +45,7 @@
  */
 public class Executor {
 
+    private static final Logger log = Logger.getLogger(Executor.class.getName());
     private List<String> cmdList;
     private File workingDirectory;
     private byte[] stdout;
@@ -297,4 +301,20 @@
             }
         }
     }
+    
+    public static void registerErrorHandler() {
+        UncaughtExceptionHandler dueh =
+            Thread.currentThread().getDefaultUncaughtExceptionHandler();
+        if (dueh == null) {
+            log.fine("Installing default uncaught exception handler");
+            Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {
+                @Override
+                public void uncaughtException(Thread t, Throwable e) {
+                    log.log(Level.SEVERE, "Uncaught exception in thread " 
+                        + t.getName() + " with ID " + t.getId() + ": "
+                        + e.getMessage(), e);
+                }
+            });
+        }
+    }
 }
